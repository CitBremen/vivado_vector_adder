-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity TopAdder is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 9;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of TopAdder is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "TopAdder,hls_ip_2015_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.232000,HLS_SYN_LAT=127,HLS_SYN_TPT=none,HLS_SYN_MEM=24,HLS_SYN_DSP=6,HLS_SYN_FF=1855,HLS_SYN_LUT=2849}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_28 : BOOLEAN;
    signal ap_ready : STD_LOGIC;
    signal output_M_real_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal output_M_real_ce0 : STD_LOGIC;
    signal output_M_real_we0 : STD_LOGIC;
    signal output_M_real_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal output_M_imag_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal output_M_imag_ce0 : STD_LOGIC;
    signal output_M_imag_we0 : STD_LOGIC;
    signal output_M_imag_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal input1_M_real_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal input1_M_real_ce0 : STD_LOGIC;
    signal input1_M_real_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal input1_M_imag_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal input1_M_imag_ce0 : STD_LOGIC;
    signal input1_M_imag_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal input2_M_real_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal input2_M_real_ce0 : STD_LOGIC;
    signal input2_M_real_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal input2_M_imag_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal input2_M_imag_ce0 : STD_LOGIC;
    signal input2_M_imag_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal TopAdder_AXILiteS_s_axi_U_ap_dummy_ce : STD_LOGIC;
    signal index_1_fu_170_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal index_1_reg_236 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_111 : BOOLEAN;
    signal tmp_2_fu_200_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_2_reg_241 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond1_fu_164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal input2_M_real_addr_reg_246 : STD_LOGIC_VECTOR (1 downto 0);
    signal input2_M_imag_addr_reg_251 : STD_LOGIC_VECTOR (1 downto 0);
    signal output_M_real_addr_reg_256 : STD_LOGIC_VECTOR (1 downto 0);
    signal output_M_imag_addr_reg_261 : STD_LOGIC_VECTOR (1 downto 0);
    signal depth_1_fu_212_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal depth_1_reg_269 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_134 : BOOLEAN;
    signal exitcond_fu_206_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal input1_M_real_load_reg_284 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_149 : BOOLEAN;
    signal input1_M_imag_load_reg_289 : STD_LOGIC_VECTOR (63 downto 0);
    signal input2_M_real_load_reg_294 : STD_LOGIC_VECTOR (63 downto 0);
    signal input2_M_imag_load_reg_299 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_156_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_r_M_real_reg_304 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_161 : BOOLEAN;
    signal grp_fu_160_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_r_M_imag_reg_309 : STD_LOGIC_VECTOR (63 downto 0);
    signal index_reg_134 : STD_LOGIC_VECTOR (1 downto 0);
    signal depth_reg_145 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_bdd_180 : BOOLEAN;
    signal tmp_fu_176_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_cast_fu_227_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_188_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_cast_fu_184_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl_cast_fu_196_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_3_cast_fu_218_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_4_fu_222_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_156_ce : STD_LOGIC;
    signal grp_fu_160_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);

    component TopAdder_dadd_64ns_64ns_64_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component TopAdder_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        ap_return : IN STD_LOGIC_VECTOR (31 downto 0);
        output_M_real_address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        output_M_real_ce0 : IN STD_LOGIC;
        output_M_real_we0 : IN STD_LOGIC;
        output_M_real_d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        output_M_imag_address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        output_M_imag_ce0 : IN STD_LOGIC;
        output_M_imag_we0 : IN STD_LOGIC;
        output_M_imag_d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        input1_M_real_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        input1_M_real_ce0 : IN STD_LOGIC;
        input1_M_real_q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        input1_M_imag_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        input1_M_imag_ce0 : IN STD_LOGIC;
        input1_M_imag_q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        input2_M_real_address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        input2_M_real_ce0 : IN STD_LOGIC;
        input2_M_real_q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        input2_M_imag_address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        input2_M_imag_ce0 : IN STD_LOGIC;
        input2_M_imag_q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    TopAdder_AXILiteS_s_axi_U : component TopAdder_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => TopAdder_AXILiteS_s_axi_U_ap_dummy_ce,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        ap_return => ap_return,
        output_M_real_address0 => output_M_real_address0,
        output_M_real_ce0 => output_M_real_ce0,
        output_M_real_we0 => output_M_real_we0,
        output_M_real_d0 => output_M_real_d0,
        output_M_imag_address0 => output_M_imag_address0,
        output_M_imag_ce0 => output_M_imag_ce0,
        output_M_imag_we0 => output_M_imag_we0,
        output_M_imag_d0 => output_M_imag_d0,
        input1_M_real_address0 => input1_M_real_address0,
        input1_M_real_ce0 => input1_M_real_ce0,
        input1_M_real_q0 => input1_M_real_q0,
        input1_M_imag_address0 => input1_M_imag_address0,
        input1_M_imag_ce0 => input1_M_imag_ce0,
        input1_M_imag_q0 => input1_M_imag_q0,
        input2_M_real_address0 => input2_M_real_address0,
        input2_M_real_ce0 => input2_M_real_ce0,
        input2_M_real_q0 => input2_M_real_q0,
        input2_M_imag_address0 => input2_M_imag_address0,
        input2_M_imag_ce0 => input2_M_imag_ce0,
        input2_M_imag_q0 => input2_M_imag_q0);

    TopAdder_dadd_64ns_64ns_64_5_full_dsp_U0 : component TopAdder_dadd_64ns_64ns_64_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => input1_M_real_load_reg_284,
        din1 => input2_M_real_load_reg_294,
        ce => grp_fu_156_ce,
        dout => grp_fu_156_p2);

    TopAdder_dadd_64ns_64ns_64_5_full_dsp_U1 : component TopAdder_dadd_64ns_64ns_64_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => input1_M_imag_load_reg_289,
        din1 => input2_M_imag_load_reg_299,
        ce => grp_fu_160_ce,
        dout => grp_fu_160_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- depth_reg_145 assign process. --
    depth_reg_145_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond1_fu_164_p2 = ap_const_lv1_0))) then 
                depth_reg_145 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
                depth_reg_145 <= depth_1_reg_269;
            end if; 
        end if;
    end process;

    -- index_reg_134 assign process. --
    index_reg_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = exitcond_fu_206_p2)))) then 
                index_reg_134 <= index_1_reg_236;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                index_reg_134 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                depth_1_reg_269 <= depth_1_fu_212_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                index_1_reg_236 <= index_1_fu_170_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                input1_M_imag_load_reg_289 <= input1_M_imag_q0;
                input1_M_real_load_reg_284 <= input1_M_real_q0;
                input2_M_imag_load_reg_299 <= input2_M_imag_q0;
                input2_M_real_load_reg_294 <= input2_M_real_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond1_fu_164_p2 = ap_const_lv1_0))) then
                input2_M_imag_addr_reg_251 <= tmp_fu_176_p1(2 - 1 downto 0);
                input2_M_real_addr_reg_246 <= tmp_fu_176_p1(2 - 1 downto 0);
                output_M_imag_addr_reg_261 <= tmp_fu_176_p1(2 - 1 downto 0);
                output_M_real_addr_reg_256 <= tmp_fu_176_p1(2 - 1 downto 0);
                tmp_2_reg_241 <= tmp_2_fu_200_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then
                p_r_M_imag_reg_309 <= grp_fu_160_p2;
                p_r_M_real_reg_304 <= grp_fu_156_p2;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond1_fu_164_p2, exitcond_fu_206_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((exitcond1_fu_164_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if ((ap_const_lv1_0 = exitcond_fu_206_p2)) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    TopAdder_AXILiteS_s_axi_U_ap_dummy_ce <= ap_const_logic_1;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond1_fu_164_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond1_fu_164_p2 = ap_const_lv1_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond1_fu_164_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond1_fu_164_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= ap_const_lv32_0;

    -- ap_rst_n_inv assign process. --
    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    -- ap_sig_bdd_111 assign process. --
    ap_sig_bdd_111_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_111 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_134 assign process. --
    ap_sig_bdd_134_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_134 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_149 assign process. --
    ap_sig_bdd_149_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_149 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_161 assign process. --
    ap_sig_bdd_161_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_161 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_bdd_180 assign process. --
    ap_sig_bdd_180_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_180 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    -- ap_sig_bdd_28 assign process. --
    ap_sig_bdd_28_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_28 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_cseq_ST_st10_fsm_9 assign process. --
    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_bdd_180)
    begin
        if (ap_sig_bdd_180) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_28)
    begin
        if (ap_sig_bdd_28) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_111)
    begin
        if (ap_sig_bdd_111) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_134)
    begin
        if (ap_sig_bdd_134) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_149)
    begin
        if (ap_sig_bdd_149) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st9_fsm_8 assign process. --
    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_bdd_161)
    begin
        if (ap_sig_bdd_161) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;

    depth_1_fu_212_p2 <= std_logic_vector(unsigned(depth_reg_145) + unsigned(ap_const_lv3_1));
    exitcond1_fu_164_p2 <= "1" when (index_reg_134 = ap_const_lv2_3) else "0";
    exitcond_fu_206_p2 <= "1" when (depth_reg_145 = ap_const_lv3_5) else "0";
    grp_fu_156_ce <= ap_const_logic_1;
    grp_fu_160_ce <= ap_const_logic_1;
    index_1_fu_170_p2 <= std_logic_vector(unsigned(index_reg_134) + unsigned(ap_const_lv2_1));
    input1_M_imag_address0 <= tmp_4_cast_fu_227_p1(4 - 1 downto 0);

    -- input1_M_imag_ce0 assign process. --
    input1_M_imag_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            input1_M_imag_ce0 <= ap_const_logic_1;
        else 
            input1_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input1_M_real_address0 <= tmp_4_cast_fu_227_p1(4 - 1 downto 0);

    -- input1_M_real_ce0 assign process. --
    input1_M_real_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            input1_M_real_ce0 <= ap_const_logic_1;
        else 
            input1_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input2_M_imag_address0 <= input2_M_imag_addr_reg_251;

    -- input2_M_imag_ce0 assign process. --
    input2_M_imag_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            input2_M_imag_ce0 <= ap_const_logic_1;
        else 
            input2_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input2_M_real_address0 <= input2_M_real_addr_reg_246;

    -- input2_M_real_ce0 assign process. --
    input2_M_real_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            input2_M_real_ce0 <= ap_const_logic_1;
        else 
            input2_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_M_imag_address0 <= output_M_imag_addr_reg_261;

    -- output_M_imag_ce0 assign process. --
    output_M_imag_ce0_assign_proc : process(ap_sig_cseq_ST_st10_fsm_9)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            output_M_imag_ce0 <= ap_const_logic_1;
        else 
            output_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_M_imag_d0 <= p_r_M_imag_reg_309;

    -- output_M_imag_we0 assign process. --
    output_M_imag_we0_assign_proc : process(ap_sig_cseq_ST_st10_fsm_9)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9))) then 
            output_M_imag_we0 <= ap_const_logic_1;
        else 
            output_M_imag_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_M_real_address0 <= output_M_real_addr_reg_256;

    -- output_M_real_ce0 assign process. --
    output_M_real_ce0_assign_proc : process(ap_sig_cseq_ST_st10_fsm_9)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            output_M_real_ce0 <= ap_const_logic_1;
        else 
            output_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_M_real_d0 <= p_r_M_real_reg_304;

    -- output_M_real_we0 assign process. --
    output_M_real_we0_assign_proc : process(ap_sig_cseq_ST_st10_fsm_9)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9))) then 
            output_M_real_we0 <= ap_const_logic_1;
        else 
            output_M_real_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl_cast_fu_196_p1 <= std_logic_vector(resize(unsigned(tmp_1_fu_188_p3),5));
    tmp_1_fu_188_p3 <= (index_reg_134 & ap_const_lv2_0);
    tmp_2_fu_200_p2 <= std_logic_vector(unsigned(tmp_cast_fu_184_p1) + unsigned(p_shl_cast_fu_196_p1));
    tmp_3_cast_fu_218_p1 <= std_logic_vector(resize(unsigned(depth_reg_145),5));
    tmp_4_cast_fu_227_p1 <= std_logic_vector(resize(unsigned(tmp_4_fu_222_p2),64));
    tmp_4_fu_222_p2 <= std_logic_vector(unsigned(tmp_2_reg_241) + unsigned(tmp_3_cast_fu_218_p1));
    tmp_cast_fu_184_p1 <= std_logic_vector(resize(unsigned(index_reg_134),5));
    tmp_fu_176_p1 <= std_logic_vector(resize(unsigned(index_reg_134),64));
end behav;
