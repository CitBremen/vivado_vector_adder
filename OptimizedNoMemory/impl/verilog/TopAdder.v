// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="TopAdder,hls_ip_2015_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=20,HLS_SYN_TPT=none,HLS_SYN_MEM=20,HLS_SYN_DSP=2,HLS_SYN_FF=1254,HLS_SYN_LUT=1353}" *)

module TopAdder (
        ap_clk,
        ap_rst_n,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 7'b1;
parameter    ap_ST_pp0_stg0_fsm_1 = 7'b10;
parameter    ap_ST_pp0_stg1_fsm_2 = 7'b100;
parameter    ap_ST_pp0_stg2_fsm_3 = 7'b1000;
parameter    ap_ST_pp0_stg3_fsm_4 = 7'b10000;
parameter    ap_ST_pp0_stg4_fsm_5 = 7'b100000;
parameter    ap_ST_st11_fsm_6 = 7'b1000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    ap_const_int64_8 = 8;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 9;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv64_0 = 64'b0000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv64_1 = 64'b1;
parameter    ap_const_lv64_2 = 64'b10;
parameter    ap_const_lv64_3 = 64'b11;
parameter    ap_const_lv64_4 = 64'b100;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv2_3 = 2'b11;
parameter    ap_const_lv2_1 = 2'b1;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_true = 1'b1;
parameter    C_S_AXI_AXILITES_WSTRB_WIDTH = (C_S_AXI_AXILITES_DATA_WIDTH / ap_const_int64_8);
parameter    C_S_AXI_WSTRB_WIDTH = (C_S_AXI_DATA_WIDTH / ap_const_int64_8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1 : 0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1 : 0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1 : 0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1 : 0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1 : 0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm = 7'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_25;
reg    ap_ready;
wire   [1:0] output_M_real_address0;
reg    output_M_real_ce0;
reg    output_M_real_we0;
wire   [31:0] output_M_real_d0;
wire   [1:0] output_M_imag_address0;
reg    output_M_imag_ce0;
reg    output_M_imag_we0;
wire   [31:0] output_M_imag_d0;
reg   [2:0] input1_M_real_0_address0;
reg    input1_M_real_0_ce0;
wire   [31:0] input1_M_real_0_q0;
reg   [2:0] input1_M_real_1_address0;
reg    input1_M_real_1_ce0;
wire   [31:0] input1_M_real_1_q0;
reg   [2:0] input1_M_real_2_address0;
reg    input1_M_real_2_ce0;
wire   [31:0] input1_M_real_2_q0;
reg   [2:0] input1_M_imag_0_address0;
reg    input1_M_imag_0_ce0;
wire   [31:0] input1_M_imag_0_q0;
reg   [2:0] input1_M_imag_1_address0;
reg    input1_M_imag_1_ce0;
wire   [31:0] input1_M_imag_1_q0;
reg   [2:0] input1_M_imag_2_address0;
reg    input1_M_imag_2_ce0;
wire   [31:0] input1_M_imag_2_q0;
wire   [1:0] input2_M_real_address0;
reg    input2_M_real_ce0;
wire   [31:0] input2_M_real_q0;
wire   [1:0] input2_M_imag_address0;
reg    input2_M_imag_ce0;
wire   [31:0] input2_M_imag_q0;
wire   [31:0] ap_return;
wire    TopAdder_AXILiteS_s_axi_U_ap_dummy_ce;
reg   [1:0] index_reg_386;
reg   [1:0] ap_reg_ppstg_index_reg_386_pp0_it1;
reg    ap_sig_cseq_ST_pp0_stg0_fsm_1;
reg    ap_sig_bdd_129;
reg    ap_reg_ppiten_pp0_it0 = 1'b0;
reg    ap_reg_ppiten_pp0_it1 = 1'b0;
wire   [31:0] grp_fu_398_p2;
reg   [31:0] reg_426;
reg    ap_sig_cseq_ST_pp0_stg1_fsm_2;
reg    ap_sig_bdd_142;
reg   [0:0] exitcond1_reg_599;
reg   [0:0] ap_reg_ppstg_exitcond1_reg_599_pp0_it1;
reg    ap_sig_cseq_ST_pp0_stg2_fsm_3;
reg    ap_sig_bdd_155;
wire   [2:0] input1_M_real_0_addr_gep_fu_74_p3;
reg   [2:0] input1_M_real_0_addr_reg_449;
wire   [2:0] input1_M_real_1_addr_gep_fu_82_p3;
reg   [2:0] input1_M_real_1_addr_reg_454;
wire   [2:0] input1_M_real_2_addr_gep_fu_90_p3;
reg   [2:0] input1_M_real_2_addr_reg_459;
wire   [2:0] input1_M_imag_0_addr_gep_fu_98_p3;
reg   [2:0] input1_M_imag_0_addr_reg_464;
wire   [2:0] input1_M_imag_1_addr_gep_fu_106_p3;
reg   [2:0] input1_M_imag_1_addr_reg_469;
wire   [2:0] input1_M_imag_2_addr_gep_fu_114_p3;
reg   [2:0] input1_M_imag_2_addr_reg_474;
wire   [2:0] input1_M_real_0_addr_1_gep_fu_122_p3;
reg   [2:0] input1_M_real_0_addr_1_reg_479;
wire   [2:0] input1_M_real_1_addr_1_gep_fu_130_p3;
reg   [2:0] input1_M_real_1_addr_1_reg_484;
wire   [2:0] input1_M_real_2_addr_1_gep_fu_138_p3;
reg   [2:0] input1_M_real_2_addr_1_reg_489;
wire   [2:0] input1_M_imag_0_addr_1_gep_fu_146_p3;
reg   [2:0] input1_M_imag_0_addr_1_reg_494;
wire   [2:0] input1_M_imag_1_addr_1_gep_fu_154_p3;
reg   [2:0] input1_M_imag_1_addr_1_reg_499;
wire   [2:0] input1_M_imag_2_addr_1_gep_fu_162_p3;
reg   [2:0] input1_M_imag_2_addr_1_reg_504;
wire   [2:0] input1_M_real_0_addr_2_gep_fu_170_p3;
reg   [2:0] input1_M_real_0_addr_2_reg_509;
wire   [2:0] input1_M_real_1_addr_2_gep_fu_178_p3;
reg   [2:0] input1_M_real_1_addr_2_reg_514;
wire   [2:0] input1_M_real_2_addr_2_gep_fu_186_p3;
reg   [2:0] input1_M_real_2_addr_2_reg_519;
wire   [2:0] input1_M_imag_0_addr_2_gep_fu_194_p3;
reg   [2:0] input1_M_imag_0_addr_2_reg_524;
wire   [2:0] input1_M_imag_1_addr_2_gep_fu_202_p3;
reg   [2:0] input1_M_imag_1_addr_2_reg_529;
wire   [2:0] input1_M_imag_2_addr_2_gep_fu_210_p3;
reg   [2:0] input1_M_imag_2_addr_2_reg_534;
wire   [2:0] input1_M_real_0_addr_3_gep_fu_218_p3;
reg   [2:0] input1_M_real_0_addr_3_reg_539;
wire   [2:0] input1_M_real_1_addr_3_gep_fu_226_p3;
reg   [2:0] input1_M_real_1_addr_3_reg_544;
wire   [2:0] input1_M_real_2_addr_3_gep_fu_234_p3;
reg   [2:0] input1_M_real_2_addr_3_reg_549;
wire   [2:0] input1_M_imag_0_addr_3_gep_fu_242_p3;
reg   [2:0] input1_M_imag_0_addr_3_reg_554;
wire   [2:0] input1_M_imag_1_addr_3_gep_fu_250_p3;
reg   [2:0] input1_M_imag_1_addr_3_reg_559;
wire   [2:0] input1_M_imag_2_addr_3_gep_fu_258_p3;
reg   [2:0] input1_M_imag_2_addr_3_reg_564;
wire   [2:0] input1_M_real_0_addr_4_gep_fu_266_p3;
reg   [2:0] input1_M_real_0_addr_4_reg_569;
wire   [2:0] input1_M_real_1_addr_4_gep_fu_274_p3;
reg   [2:0] input1_M_real_1_addr_4_reg_574;
wire   [2:0] input1_M_real_2_addr_4_gep_fu_282_p3;
reg   [2:0] input1_M_real_2_addr_4_reg_579;
wire   [2:0] input1_M_imag_0_addr_4_gep_fu_290_p3;
reg   [2:0] input1_M_imag_0_addr_4_reg_584;
wire   [2:0] input1_M_imag_1_addr_4_gep_fu_298_p3;
reg   [2:0] input1_M_imag_1_addr_4_reg_589;
wire   [2:0] input1_M_imag_2_addr_4_gep_fu_306_p3;
reg   [2:0] input1_M_imag_2_addr_4_reg_594;
wire   [0:0] exitcond1_fu_432_p2;
wire   [1:0] index_1_fu_438_p2;
reg   [1:0] index_1_reg_603;
wire   [63:0] tmp_fu_444_p1;
reg   [63:0] tmp_reg_608;
reg   [63:0] ap_reg_ppstg_tmp_reg_608_pp0_it1;
reg   [31:0] input2_M_real_load_reg_625;
wire   [31:0] grp_fu_402_p5;
reg   [31:0] p_x_M_real_read_assign_reg_630;
wire   [31:0] grp_fu_414_p5;
reg   [31:0] p_x_M_imag_read_assign_reg_635;
reg   [31:0] input2_M_imag_load_reg_640;
reg    ap_sig_cseq_ST_pp0_stg4_fsm_5;
reg    ap_sig_bdd_258;
reg   [1:0] index_phi_fu_390_p4;
reg    ap_sig_cseq_ST_pp0_stg3_fsm_4;
reg    ap_sig_bdd_281;
reg   [31:0] grp_fu_398_p0;
reg   [31:0] grp_fu_398_p1;
reg   [1:0] grp_fu_402_p4;
reg   [1:0] grp_fu_414_p4;
wire    grp_fu_398_ce;
reg    ap_sig_cseq_ST_st11_fsm_6;
reg    ap_sig_bdd_330;
reg   [6:0] ap_NS_fsm;


TopAdder_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
TopAdder_AXILiteS_s_axi_U(
    .AWVALID( s_axi_AXILiteS_AWVALID ),
    .AWREADY( s_axi_AXILiteS_AWREADY ),
    .AWADDR( s_axi_AXILiteS_AWADDR ),
    .WVALID( s_axi_AXILiteS_WVALID ),
    .WREADY( s_axi_AXILiteS_WREADY ),
    .WDATA( s_axi_AXILiteS_WDATA ),
    .WSTRB( s_axi_AXILiteS_WSTRB ),
    .ARVALID( s_axi_AXILiteS_ARVALID ),
    .ARREADY( s_axi_AXILiteS_ARREADY ),
    .ARADDR( s_axi_AXILiteS_ARADDR ),
    .RVALID( s_axi_AXILiteS_RVALID ),
    .RREADY( s_axi_AXILiteS_RREADY ),
    .RDATA( s_axi_AXILiteS_RDATA ),
    .RRESP( s_axi_AXILiteS_RRESP ),
    .BVALID( s_axi_AXILiteS_BVALID ),
    .BREADY( s_axi_AXILiteS_BREADY ),
    .BRESP( s_axi_AXILiteS_BRESP ),
    .ACLK( ap_clk ),
    .ARESET( ap_rst_n_inv ),
    .ACLK_EN( TopAdder_AXILiteS_s_axi_U_ap_dummy_ce ),
    .ap_start( ap_start ),
    .interrupt( interrupt ),
    .ap_ready( ap_ready ),
    .ap_done( ap_done ),
    .ap_idle( ap_idle ),
    .ap_return( ap_return ),
    .output_M_real_address0( output_M_real_address0 ),
    .output_M_real_ce0( output_M_real_ce0 ),
    .output_M_real_we0( output_M_real_we0 ),
    .output_M_real_d0( output_M_real_d0 ),
    .output_M_imag_address0( output_M_imag_address0 ),
    .output_M_imag_ce0( output_M_imag_ce0 ),
    .output_M_imag_we0( output_M_imag_we0 ),
    .output_M_imag_d0( output_M_imag_d0 ),
    .input1_M_real_0_address0( input1_M_real_0_address0 ),
    .input1_M_real_0_ce0( input1_M_real_0_ce0 ),
    .input1_M_real_0_q0( input1_M_real_0_q0 ),
    .input1_M_real_1_address0( input1_M_real_1_address0 ),
    .input1_M_real_1_ce0( input1_M_real_1_ce0 ),
    .input1_M_real_1_q0( input1_M_real_1_q0 ),
    .input1_M_real_2_address0( input1_M_real_2_address0 ),
    .input1_M_real_2_ce0( input1_M_real_2_ce0 ),
    .input1_M_real_2_q0( input1_M_real_2_q0 ),
    .input1_M_imag_0_address0( input1_M_imag_0_address0 ),
    .input1_M_imag_0_ce0( input1_M_imag_0_ce0 ),
    .input1_M_imag_0_q0( input1_M_imag_0_q0 ),
    .input1_M_imag_1_address0( input1_M_imag_1_address0 ),
    .input1_M_imag_1_ce0( input1_M_imag_1_ce0 ),
    .input1_M_imag_1_q0( input1_M_imag_1_q0 ),
    .input1_M_imag_2_address0( input1_M_imag_2_address0 ),
    .input1_M_imag_2_ce0( input1_M_imag_2_ce0 ),
    .input1_M_imag_2_q0( input1_M_imag_2_q0 ),
    .input2_M_real_address0( input2_M_real_address0 ),
    .input2_M_real_ce0( input2_M_real_ce0 ),
    .input2_M_real_q0( input2_M_real_q0 ),
    .input2_M_imag_address0( input2_M_imag_address0 ),
    .input2_M_imag_ce0( input2_M_imag_ce0 ),
    .input2_M_imag_q0( input2_M_imag_q0 )
);

TopAdder_fadd_32ns_32ns_32_5_full_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
TopAdder_fadd_32ns_32ns_32_5_full_dsp_U0(
    .clk( ap_clk ),
    .reset( ap_rst_n_inv ),
    .din0( grp_fu_398_p0 ),
    .din1( grp_fu_398_p1 ),
    .ce( grp_fu_398_ce ),
    .dout( grp_fu_398_p2 )
);

TopAdder_mux_3to1_sel2_32_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
TopAdder_mux_3to1_sel2_32_1_U1(
    .din1( input1_M_real_0_q0 ),
    .din2( input1_M_real_1_q0 ),
    .din3( input1_M_real_2_q0 ),
    .din4( grp_fu_402_p4 ),
    .dout( grp_fu_402_p5 )
);

TopAdder_mux_3to1_sel2_32_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
TopAdder_mux_3to1_sel2_32_1_U2(
    .din1( input1_M_imag_0_q0 ),
    .din2( input1_M_imag_1_q0 ),
    .din3( input1_M_imag_2_q0 ),
    .din4( grp_fu_414_p4 ),
    .dout( grp_fu_414_p5 )
);



always @ (posedge ap_clk) begin : ap_ret_ap_CS_fsm
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp0_it0
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(ap_const_lv1_0 == exitcond1_fu_432_p2))) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp0_it1
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
    end else begin
        if (((exitcond1_reg_599 == ap_const_lv1_0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg4_fsm_5))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
        end else if ((((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg4_fsm_5) & ~(exitcond1_reg_599 == ap_const_lv1_0)))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (exitcond1_reg_599 == ap_const_lv1_0))) begin
        index_reg_386 <= index_1_reg_603;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        index_reg_386 <= ap_const_lv2_0;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1)) begin
        ap_reg_ppstg_exitcond1_reg_599_pp0_it1 <= exitcond1_reg_599;
        ap_reg_ppstg_index_reg_386_pp0_it1 <= index_reg_386;
        ap_reg_ppstg_tmp_reg_608_pp0_it1[1 : 0] <= tmp_reg_608[1 : 0];
        exitcond1_reg_599 <= exitcond1_fu_432_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0))) begin
        index_1_reg_603 <= index_1_fu_438_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg2_fsm_3) & (exitcond1_reg_599 == ap_const_lv1_0))) begin
        input2_M_imag_load_reg_640 <= input2_M_imag_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg1_fsm_2) & (exitcond1_reg_599 == ap_const_lv1_0))) begin
        input2_M_real_load_reg_625 <= input2_M_real_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg1_fsm_2) & (exitcond1_reg_599 == ap_const_lv1_0))) begin
        p_x_M_imag_read_assign_reg_635 <= grp_fu_414_p5;
        p_x_M_real_read_assign_reg_630 <= grp_fu_402_p5;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg1_fsm_2) & (ap_reg_ppstg_exitcond1_reg_599_pp0_it1 == ap_const_lv1_0)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (ap_reg_ppstg_exitcond1_reg_599_pp0_it1 == ap_const_lv1_0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg2_fsm_3)))) begin
        reg_426 <= grp_fu_398_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_lv1_0 == exitcond1_fu_432_p2))) begin
        tmp_reg_608[1 : 0] <= tmp_fu_444_p1[1 : 0];
    end
end

always @ (ap_sig_cseq_ST_st11_fsm_6) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st11_fsm_6)) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0) begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st11_fsm_6) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st11_fsm_6)) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_129) begin
    if (ap_sig_bdd_129) begin
        ap_sig_cseq_ST_pp0_stg0_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg0_fsm_1 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_142) begin
    if (ap_sig_bdd_142) begin
        ap_sig_cseq_ST_pp0_stg1_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg1_fsm_2 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_155) begin
    if (ap_sig_bdd_155) begin
        ap_sig_cseq_ST_pp0_stg2_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg2_fsm_3 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_281) begin
    if (ap_sig_bdd_281) begin
        ap_sig_cseq_ST_pp0_stg3_fsm_4 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg3_fsm_4 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_258) begin
    if (ap_sig_bdd_258) begin
        ap_sig_cseq_ST_pp0_stg4_fsm_5 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg4_fsm_5 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_330) begin
    if (ap_sig_bdd_330) begin
        ap_sig_cseq_ST_st11_fsm_6 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st11_fsm_6 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_25) begin
    if (ap_sig_bdd_25) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

always @ (ap_reg_ppiten_pp0_it0 or ap_sig_cseq_ST_pp0_stg2_fsm_3 or p_x_M_real_read_assign_reg_630 or p_x_M_imag_read_assign_reg_635 or ap_sig_cseq_ST_pp0_stg3_fsm_4) begin
    if ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) begin
        if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg3_fsm_4)) begin
            grp_fu_398_p0 = p_x_M_imag_read_assign_reg_635;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg2_fsm_3)) begin
            grp_fu_398_p0 = p_x_M_real_read_assign_reg_630;
        end else begin
            grp_fu_398_p0 = 'bx;
        end
    end else begin
        grp_fu_398_p0 = 'bx;
    end
end

always @ (ap_reg_ppiten_pp0_it0 or ap_sig_cseq_ST_pp0_stg2_fsm_3 or input2_M_real_load_reg_625 or input2_M_imag_load_reg_640 or ap_sig_cseq_ST_pp0_stg3_fsm_4) begin
    if ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) begin
        if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg3_fsm_4)) begin
            grp_fu_398_p1 = input2_M_imag_load_reg_640;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg2_fsm_3)) begin
            grp_fu_398_p1 = input2_M_real_load_reg_625;
        end else begin
            grp_fu_398_p1 = 'bx;
        end
    end else begin
        grp_fu_398_p1 = 'bx;
    end
end

always @ (index_reg_386 or ap_reg_ppstg_index_reg_386_pp0_it1 or ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or ap_sig_cseq_ST_pp0_stg1_fsm_2 or ap_sig_cseq_ST_pp0_stg2_fsm_3 or ap_sig_cseq_ST_pp0_stg4_fsm_5 or ap_sig_cseq_ST_pp0_stg3_fsm_4) begin
    if ((((ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg2_fsm_3)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg3_fsm_4)))) begin
        grp_fu_402_p4 = ap_reg_ppstg_index_reg_386_pp0_it1;
    end else if ((((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg1_fsm_2)) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg4_fsm_5)))) begin
        grp_fu_402_p4 = index_reg_386;
    end else begin
        grp_fu_402_p4 = 'bx;
    end
end

always @ (index_reg_386 or ap_reg_ppstg_index_reg_386_pp0_it1 or ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or ap_sig_cseq_ST_pp0_stg1_fsm_2 or ap_sig_cseq_ST_pp0_stg2_fsm_3 or ap_sig_cseq_ST_pp0_stg4_fsm_5 or ap_sig_cseq_ST_pp0_stg3_fsm_4) begin
    if ((((ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg2_fsm_3)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg3_fsm_4)))) begin
        grp_fu_414_p4 = ap_reg_ppstg_index_reg_386_pp0_it1;
    end else if ((((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg1_fsm_2)) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg4_fsm_5)))) begin
        grp_fu_414_p4 = index_reg_386;
    end else begin
        grp_fu_414_p4 = 'bx;
    end
end

always @ (index_reg_386 or ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it1 or exitcond1_reg_599 or index_1_reg_603) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (exitcond1_reg_599 == ap_const_lv1_0))) begin
        index_phi_fu_390_p4 = index_1_reg_603;
    end else begin
        index_phi_fu_390_p4 = index_reg_386;
    end
end

always @ (ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or ap_sig_cseq_ST_pp0_stg1_fsm_2 or ap_sig_cseq_ST_pp0_stg2_fsm_3 or input1_M_imag_0_addr_reg_464 or input1_M_imag_0_addr_1_reg_494 or input1_M_imag_0_addr_2_reg_524 or input1_M_imag_0_addr_3_reg_554 or input1_M_imag_0_addr_4_reg_584 or ap_sig_cseq_ST_pp0_stg4_fsm_5 or ap_sig_cseq_ST_pp0_stg3_fsm_4) begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg2_fsm_3))) begin
        input1_M_imag_0_address0 = input1_M_imag_0_addr_1_reg_494;
    end else if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg1_fsm_2))) begin
        input1_M_imag_0_address0 = input1_M_imag_0_addr_reg_464;
    end else if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg4_fsm_5))) begin
        input1_M_imag_0_address0 = input1_M_imag_0_addr_3_reg_554;
    end else if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg3_fsm_4))) begin
        input1_M_imag_0_address0 = input1_M_imag_0_addr_2_reg_524;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0))) begin
        input1_M_imag_0_address0 = input1_M_imag_0_addr_4_reg_584;
    end else begin
        input1_M_imag_0_address0 = 'bx;
    end
end

always @ (ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or ap_sig_cseq_ST_pp0_stg1_fsm_2 or ap_sig_cseq_ST_pp0_stg2_fsm_3 or ap_sig_cseq_ST_pp0_stg4_fsm_5 or ap_sig_cseq_ST_pp0_stg3_fsm_4) begin
    if ((((ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg1_fsm_2)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg2_fsm_3)) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg3_fsm_4)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg4_fsm_5)))) begin
        input1_M_imag_0_ce0 = ap_const_logic_1;
    end else begin
        input1_M_imag_0_ce0 = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or ap_sig_cseq_ST_pp0_stg1_fsm_2 or ap_sig_cseq_ST_pp0_stg2_fsm_3 or input1_M_imag_1_addr_reg_469 or input1_M_imag_1_addr_1_reg_499 or input1_M_imag_1_addr_2_reg_529 or input1_M_imag_1_addr_3_reg_559 or input1_M_imag_1_addr_4_reg_589 or ap_sig_cseq_ST_pp0_stg4_fsm_5 or ap_sig_cseq_ST_pp0_stg3_fsm_4) begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg2_fsm_3))) begin
        input1_M_imag_1_address0 = input1_M_imag_1_addr_1_reg_499;
    end else if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg1_fsm_2))) begin
        input1_M_imag_1_address0 = input1_M_imag_1_addr_reg_469;
    end else if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg4_fsm_5))) begin
        input1_M_imag_1_address0 = input1_M_imag_1_addr_3_reg_559;
    end else if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg3_fsm_4))) begin
        input1_M_imag_1_address0 = input1_M_imag_1_addr_2_reg_529;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0))) begin
        input1_M_imag_1_address0 = input1_M_imag_1_addr_4_reg_589;
    end else begin
        input1_M_imag_1_address0 = 'bx;
    end
end

always @ (ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or ap_sig_cseq_ST_pp0_stg1_fsm_2 or ap_sig_cseq_ST_pp0_stg2_fsm_3 or ap_sig_cseq_ST_pp0_stg4_fsm_5 or ap_sig_cseq_ST_pp0_stg3_fsm_4) begin
    if ((((ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg1_fsm_2)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg2_fsm_3)) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg3_fsm_4)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg4_fsm_5)))) begin
        input1_M_imag_1_ce0 = ap_const_logic_1;
    end else begin
        input1_M_imag_1_ce0 = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or ap_sig_cseq_ST_pp0_stg1_fsm_2 or ap_sig_cseq_ST_pp0_stg2_fsm_3 or input1_M_imag_2_addr_reg_474 or input1_M_imag_2_addr_1_reg_504 or input1_M_imag_2_addr_2_reg_534 or input1_M_imag_2_addr_3_reg_564 or input1_M_imag_2_addr_4_reg_594 or ap_sig_cseq_ST_pp0_stg4_fsm_5 or ap_sig_cseq_ST_pp0_stg3_fsm_4) begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg2_fsm_3))) begin
        input1_M_imag_2_address0 = input1_M_imag_2_addr_1_reg_504;
    end else if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg1_fsm_2))) begin
        input1_M_imag_2_address0 = input1_M_imag_2_addr_reg_474;
    end else if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg4_fsm_5))) begin
        input1_M_imag_2_address0 = input1_M_imag_2_addr_3_reg_564;
    end else if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg3_fsm_4))) begin
        input1_M_imag_2_address0 = input1_M_imag_2_addr_2_reg_534;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0))) begin
        input1_M_imag_2_address0 = input1_M_imag_2_addr_4_reg_594;
    end else begin
        input1_M_imag_2_address0 = 'bx;
    end
end

always @ (ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or ap_sig_cseq_ST_pp0_stg1_fsm_2 or ap_sig_cseq_ST_pp0_stg2_fsm_3 or ap_sig_cseq_ST_pp0_stg4_fsm_5 or ap_sig_cseq_ST_pp0_stg3_fsm_4) begin
    if ((((ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg1_fsm_2)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg2_fsm_3)) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg3_fsm_4)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg4_fsm_5)))) begin
        input1_M_imag_2_ce0 = ap_const_logic_1;
    end else begin
        input1_M_imag_2_ce0 = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or ap_sig_cseq_ST_pp0_stg1_fsm_2 or ap_sig_cseq_ST_pp0_stg2_fsm_3 or input1_M_real_0_addr_reg_449 or input1_M_real_0_addr_1_reg_479 or input1_M_real_0_addr_2_reg_509 or input1_M_real_0_addr_3_reg_539 or input1_M_real_0_addr_4_reg_569 or ap_sig_cseq_ST_pp0_stg4_fsm_5 or ap_sig_cseq_ST_pp0_stg3_fsm_4) begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg2_fsm_3))) begin
        input1_M_real_0_address0 = input1_M_real_0_addr_1_reg_479;
    end else if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg1_fsm_2))) begin
        input1_M_real_0_address0 = input1_M_real_0_addr_reg_449;
    end else if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg4_fsm_5))) begin
        input1_M_real_0_address0 = input1_M_real_0_addr_3_reg_539;
    end else if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg3_fsm_4))) begin
        input1_M_real_0_address0 = input1_M_real_0_addr_2_reg_509;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0))) begin
        input1_M_real_0_address0 = input1_M_real_0_addr_4_reg_569;
    end else begin
        input1_M_real_0_address0 = 'bx;
    end
end

always @ (ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or ap_sig_cseq_ST_pp0_stg1_fsm_2 or ap_sig_cseq_ST_pp0_stg2_fsm_3 or ap_sig_cseq_ST_pp0_stg4_fsm_5 or ap_sig_cseq_ST_pp0_stg3_fsm_4) begin
    if ((((ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg1_fsm_2)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg2_fsm_3)) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg3_fsm_4)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg4_fsm_5)))) begin
        input1_M_real_0_ce0 = ap_const_logic_1;
    end else begin
        input1_M_real_0_ce0 = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or ap_sig_cseq_ST_pp0_stg1_fsm_2 or ap_sig_cseq_ST_pp0_stg2_fsm_3 or input1_M_real_1_addr_reg_454 or input1_M_real_1_addr_1_reg_484 or input1_M_real_1_addr_2_reg_514 or input1_M_real_1_addr_3_reg_544 or input1_M_real_1_addr_4_reg_574 or ap_sig_cseq_ST_pp0_stg4_fsm_5 or ap_sig_cseq_ST_pp0_stg3_fsm_4) begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg2_fsm_3))) begin
        input1_M_real_1_address0 = input1_M_real_1_addr_1_reg_484;
    end else if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg1_fsm_2))) begin
        input1_M_real_1_address0 = input1_M_real_1_addr_reg_454;
    end else if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg4_fsm_5))) begin
        input1_M_real_1_address0 = input1_M_real_1_addr_3_reg_544;
    end else if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg3_fsm_4))) begin
        input1_M_real_1_address0 = input1_M_real_1_addr_2_reg_514;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0))) begin
        input1_M_real_1_address0 = input1_M_real_1_addr_4_reg_574;
    end else begin
        input1_M_real_1_address0 = 'bx;
    end
end

always @ (ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or ap_sig_cseq_ST_pp0_stg1_fsm_2 or ap_sig_cseq_ST_pp0_stg2_fsm_3 or ap_sig_cseq_ST_pp0_stg4_fsm_5 or ap_sig_cseq_ST_pp0_stg3_fsm_4) begin
    if ((((ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg1_fsm_2)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg2_fsm_3)) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg3_fsm_4)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg4_fsm_5)))) begin
        input1_M_real_1_ce0 = ap_const_logic_1;
    end else begin
        input1_M_real_1_ce0 = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or ap_sig_cseq_ST_pp0_stg1_fsm_2 or ap_sig_cseq_ST_pp0_stg2_fsm_3 or input1_M_real_2_addr_reg_459 or input1_M_real_2_addr_1_reg_489 or input1_M_real_2_addr_2_reg_519 or input1_M_real_2_addr_3_reg_549 or input1_M_real_2_addr_4_reg_579 or ap_sig_cseq_ST_pp0_stg4_fsm_5 or ap_sig_cseq_ST_pp0_stg3_fsm_4) begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg2_fsm_3))) begin
        input1_M_real_2_address0 = input1_M_real_2_addr_1_reg_489;
    end else if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg1_fsm_2))) begin
        input1_M_real_2_address0 = input1_M_real_2_addr_reg_459;
    end else if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg4_fsm_5))) begin
        input1_M_real_2_address0 = input1_M_real_2_addr_3_reg_549;
    end else if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg3_fsm_4))) begin
        input1_M_real_2_address0 = input1_M_real_2_addr_2_reg_519;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0))) begin
        input1_M_real_2_address0 = input1_M_real_2_addr_4_reg_579;
    end else begin
        input1_M_real_2_address0 = 'bx;
    end
end

always @ (ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or ap_sig_cseq_ST_pp0_stg1_fsm_2 or ap_sig_cseq_ST_pp0_stg2_fsm_3 or ap_sig_cseq_ST_pp0_stg4_fsm_5 or ap_sig_cseq_ST_pp0_stg3_fsm_4) begin
    if ((((ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg1_fsm_2)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg2_fsm_3)) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg3_fsm_4)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg4_fsm_5)))) begin
        input1_M_real_2_ce0 = ap_const_logic_1;
    end else begin
        input1_M_real_2_ce0 = ap_const_logic_0;
    end
end

always @ (ap_reg_ppiten_pp0_it0 or ap_sig_cseq_ST_pp0_stg1_fsm_2) begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg1_fsm_2))) begin
        input2_M_imag_ce0 = ap_const_logic_1;
    end else begin
        input2_M_imag_ce0 = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it0) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0))) begin
        input2_M_real_ce0 = ap_const_logic_1;
    end else begin
        input2_M_real_ce0 = ap_const_logic_0;
    end
end

always @ (ap_reg_ppiten_pp0_it1 or ap_sig_cseq_ST_pp0_stg3_fsm_4) begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg3_fsm_4))) begin
        output_M_imag_ce0 = ap_const_logic_1;
    end else begin
        output_M_imag_ce0 = ap_const_logic_0;
    end
end

always @ (ap_reg_ppiten_pp0_it1 or ap_reg_ppstg_exitcond1_reg_599_pp0_it1 or ap_sig_cseq_ST_pp0_stg3_fsm_4) begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (ap_reg_ppstg_exitcond1_reg_599_pp0_it1 == ap_const_lv1_0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg3_fsm_4))) begin
        output_M_imag_we0 = ap_const_logic_1;
    end else begin
        output_M_imag_we0 = ap_const_logic_0;
    end
end

always @ (ap_reg_ppiten_pp0_it1 or ap_sig_cseq_ST_pp0_stg2_fsm_3) begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg2_fsm_3))) begin
        output_M_real_ce0 = ap_const_logic_1;
    end else begin
        output_M_real_ce0 = ap_const_logic_0;
    end
end

always @ (ap_reg_ppiten_pp0_it1 or ap_reg_ppstg_exitcond1_reg_599_pp0_it1 or ap_sig_cseq_ST_pp0_stg2_fsm_3) begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (ap_reg_ppstg_exitcond1_reg_599_pp0_it1 == ap_const_lv1_0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg2_fsm_3))) begin
        output_M_real_we0 = ap_const_logic_1;
    end else begin
        output_M_real_we0 = ap_const_logic_0;
    end
end
always @ (ap_start or ap_CS_fsm or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or exitcond1_fu_432_p2 or ap_sig_cseq_ST_pp0_stg3_fsm_4) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_pp0_stg0_fsm_1 : 
        begin
            if (~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(ap_const_lv1_0 == exitcond1_fu_432_p2) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1))) begin
                ap_NS_fsm = ap_ST_pp0_stg1_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_st11_fsm_6;
            end
        end
        ap_ST_pp0_stg1_fsm_2 : 
        begin
            ap_NS_fsm = ap_ST_pp0_stg2_fsm_3;
        end
        ap_ST_pp0_stg2_fsm_3 : 
        begin
            ap_NS_fsm = ap_ST_pp0_stg3_fsm_4;
        end
        ap_ST_pp0_stg3_fsm_4 : 
        begin
            if (~((ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg3_fsm_4) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it0))) begin
                ap_NS_fsm = ap_ST_pp0_stg4_fsm_5;
            end else begin
                ap_NS_fsm = ap_ST_st11_fsm_6;
            end
        end
        ap_ST_pp0_stg4_fsm_5 : 
        begin
            ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
        end
        ap_ST_st11_fsm_6 : 
        begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


assign TopAdder_AXILiteS_s_axi_U_ap_dummy_ce = ap_const_logic_1;

assign ap_return = ap_const_lv32_0;


always @ (ap_rst_n) begin
    ap_rst_n_inv = ~ap_rst_n;
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_129 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_142 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_155 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_25 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_258 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_5]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_281 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_4]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_330 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_6]);
end

assign exitcond1_fu_432_p2 = (index_phi_fu_390_p4 == ap_const_lv2_3? 1'b1: 1'b0);

assign grp_fu_398_ce = ap_const_logic_1;

assign index_1_fu_438_p2 = (index_phi_fu_390_p4 + ap_const_lv2_1);

assign input1_M_imag_0_addr_1_gep_fu_146_p3 = ap_const_lv64_1;

assign input1_M_imag_0_addr_2_gep_fu_194_p3 = ap_const_lv64_2;

assign input1_M_imag_0_addr_3_gep_fu_242_p3 = ap_const_lv64_3;

assign input1_M_imag_0_addr_4_gep_fu_290_p3 = ap_const_lv64_4;

assign input1_M_imag_0_addr_gep_fu_98_p3 = ap_const_lv64_0;

assign input1_M_imag_1_addr_1_gep_fu_154_p3 = ap_const_lv64_1;

assign input1_M_imag_1_addr_2_gep_fu_202_p3 = ap_const_lv64_2;

assign input1_M_imag_1_addr_3_gep_fu_250_p3 = ap_const_lv64_3;

assign input1_M_imag_1_addr_4_gep_fu_298_p3 = ap_const_lv64_4;

assign input1_M_imag_1_addr_gep_fu_106_p3 = ap_const_lv64_0;

assign input1_M_imag_2_addr_1_gep_fu_162_p3 = ap_const_lv64_1;

assign input1_M_imag_2_addr_2_gep_fu_210_p3 = ap_const_lv64_2;

assign input1_M_imag_2_addr_3_gep_fu_258_p3 = ap_const_lv64_3;

assign input1_M_imag_2_addr_4_gep_fu_306_p3 = ap_const_lv64_4;

assign input1_M_imag_2_addr_gep_fu_114_p3 = ap_const_lv64_0;

assign input1_M_real_0_addr_1_gep_fu_122_p3 = ap_const_lv64_1;

assign input1_M_real_0_addr_2_gep_fu_170_p3 = ap_const_lv64_2;

assign input1_M_real_0_addr_3_gep_fu_218_p3 = ap_const_lv64_3;

assign input1_M_real_0_addr_4_gep_fu_266_p3 = ap_const_lv64_4;

assign input1_M_real_0_addr_gep_fu_74_p3 = ap_const_lv64_0;

assign input1_M_real_1_addr_1_gep_fu_130_p3 = ap_const_lv64_1;

assign input1_M_real_1_addr_2_gep_fu_178_p3 = ap_const_lv64_2;

assign input1_M_real_1_addr_3_gep_fu_226_p3 = ap_const_lv64_3;

assign input1_M_real_1_addr_4_gep_fu_274_p3 = ap_const_lv64_4;

assign input1_M_real_1_addr_gep_fu_82_p3 = ap_const_lv64_0;

assign input1_M_real_2_addr_1_gep_fu_138_p3 = ap_const_lv64_1;

assign input1_M_real_2_addr_2_gep_fu_186_p3 = ap_const_lv64_2;

assign input1_M_real_2_addr_3_gep_fu_234_p3 = ap_const_lv64_3;

assign input1_M_real_2_addr_4_gep_fu_282_p3 = ap_const_lv64_4;

assign input1_M_real_2_addr_gep_fu_90_p3 = ap_const_lv64_0;

assign input2_M_imag_address0 = tmp_reg_608;

assign input2_M_real_address0 = tmp_fu_444_p1;

assign output_M_imag_address0 = ap_reg_ppstg_tmp_reg_608_pp0_it1;

assign output_M_imag_d0 = reg_426;

assign output_M_real_address0 = ap_reg_ppstg_tmp_reg_608_pp0_it1;

assign output_M_real_d0 = reg_426;

assign tmp_fu_444_p1 = index_phi_fu_390_p4;
always @ (posedge ap_clk) begin
    input1_M_real_0_addr_reg_449[2:0] <= 3'b000;
    input1_M_real_1_addr_reg_454[2:0] <= 3'b000;
    input1_M_real_2_addr_reg_459[2:0] <= 3'b000;
    input1_M_imag_0_addr_reg_464[2:0] <= 3'b000;
    input1_M_imag_1_addr_reg_469[2:0] <= 3'b000;
    input1_M_imag_2_addr_reg_474[2:0] <= 3'b000;
    input1_M_real_0_addr_1_reg_479[2:0] <= 3'b001;
    input1_M_real_1_addr_1_reg_484[2:0] <= 3'b001;
    input1_M_real_2_addr_1_reg_489[2:0] <= 3'b001;
    input1_M_imag_0_addr_1_reg_494[2:0] <= 3'b001;
    input1_M_imag_1_addr_1_reg_499[2:0] <= 3'b001;
    input1_M_imag_2_addr_1_reg_504[2:0] <= 3'b001;
    input1_M_real_0_addr_2_reg_509[2:0] <= 3'b010;
    input1_M_real_1_addr_2_reg_514[2:0] <= 3'b010;
    input1_M_real_2_addr_2_reg_519[2:0] <= 3'b010;
    input1_M_imag_0_addr_2_reg_524[2:0] <= 3'b010;
    input1_M_imag_1_addr_2_reg_529[2:0] <= 3'b010;
    input1_M_imag_2_addr_2_reg_534[2:0] <= 3'b010;
    input1_M_real_0_addr_3_reg_539[2:0] <= 3'b011;
    input1_M_real_1_addr_3_reg_544[2:0] <= 3'b011;
    input1_M_real_2_addr_3_reg_549[2:0] <= 3'b011;
    input1_M_imag_0_addr_3_reg_554[2:0] <= 3'b011;
    input1_M_imag_1_addr_3_reg_559[2:0] <= 3'b011;
    input1_M_imag_2_addr_3_reg_564[2:0] <= 3'b011;
    input1_M_real_0_addr_4_reg_569[2:0] <= 3'b100;
    input1_M_real_1_addr_4_reg_574[2:0] <= 3'b100;
    input1_M_real_2_addr_4_reg_579[2:0] <= 3'b100;
    input1_M_imag_0_addr_4_reg_584[2:0] <= 3'b100;
    input1_M_imag_1_addr_4_reg_589[2:0] <= 3'b100;
    input1_M_imag_2_addr_4_reg_594[2:0] <= 3'b100;
    tmp_reg_608[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
    ap_reg_ppstg_tmp_reg_608_pp0_it1[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
end



endmodule //TopAdder

