-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity TopAdder is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 9;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of TopAdder is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "TopAdder,hls_ip_2015_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=20,HLS_SYN_TPT=none,HLS_SYN_MEM=20,HLS_SYN_DSP=2,HLS_SYN_FF=1254,HLS_SYN_LUT=1353}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_pp0_stg0_fsm_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_pp0_stg1_fsm_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_pp0_stg2_fsm_3 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_pp0_stg3_fsm_4 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_pp0_stg4_fsm_5 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_st11_fsm_6 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_25 : BOOLEAN;
    signal ap_ready : STD_LOGIC;
    signal output_M_real_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal output_M_real_ce0 : STD_LOGIC;
    signal output_M_real_we0 : STD_LOGIC;
    signal output_M_real_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_M_imag_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal output_M_imag_ce0 : STD_LOGIC;
    signal output_M_imag_we0 : STD_LOGIC;
    signal output_M_imag_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input1_M_real_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal input1_M_real_0_ce0 : STD_LOGIC;
    signal input1_M_real_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input1_M_real_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal input1_M_real_1_ce0 : STD_LOGIC;
    signal input1_M_real_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input1_M_real_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal input1_M_real_2_ce0 : STD_LOGIC;
    signal input1_M_real_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input1_M_imag_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal input1_M_imag_0_ce0 : STD_LOGIC;
    signal input1_M_imag_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input1_M_imag_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal input1_M_imag_1_ce0 : STD_LOGIC;
    signal input1_M_imag_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input1_M_imag_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal input1_M_imag_2_ce0 : STD_LOGIC;
    signal input1_M_imag_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input2_M_real_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal input2_M_real_ce0 : STD_LOGIC;
    signal input2_M_real_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input2_M_imag_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal input2_M_imag_ce0 : STD_LOGIC;
    signal input2_M_imag_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal TopAdder_AXILiteS_s_axi_U_ap_dummy_ce : STD_LOGIC;
    signal index_reg_386 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_ppstg_index_reg_386_pp0_it1 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_129 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal grp_fu_398_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_426 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_pp0_stg1_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_142 : BOOLEAN;
    signal exitcond1_reg_599 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_599_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg2_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_155 : BOOLEAN;
    signal input1_M_real_0_addr_gep_fu_74_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal input1_M_real_0_addr_reg_449 : STD_LOGIC_VECTOR (2 downto 0);
    signal input1_M_real_1_addr_gep_fu_82_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal input1_M_real_1_addr_reg_454 : STD_LOGIC_VECTOR (2 downto 0);
    signal input1_M_real_2_addr_gep_fu_90_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal input1_M_real_2_addr_reg_459 : STD_LOGIC_VECTOR (2 downto 0);
    signal input1_M_imag_0_addr_gep_fu_98_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal input1_M_imag_0_addr_reg_464 : STD_LOGIC_VECTOR (2 downto 0);
    signal input1_M_imag_1_addr_gep_fu_106_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal input1_M_imag_1_addr_reg_469 : STD_LOGIC_VECTOR (2 downto 0);
    signal input1_M_imag_2_addr_gep_fu_114_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal input1_M_imag_2_addr_reg_474 : STD_LOGIC_VECTOR (2 downto 0);
    signal input1_M_real_0_addr_1_gep_fu_122_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal input1_M_real_0_addr_1_reg_479 : STD_LOGIC_VECTOR (2 downto 0);
    signal input1_M_real_1_addr_1_gep_fu_130_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal input1_M_real_1_addr_1_reg_484 : STD_LOGIC_VECTOR (2 downto 0);
    signal input1_M_real_2_addr_1_gep_fu_138_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal input1_M_real_2_addr_1_reg_489 : STD_LOGIC_VECTOR (2 downto 0);
    signal input1_M_imag_0_addr_1_gep_fu_146_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal input1_M_imag_0_addr_1_reg_494 : STD_LOGIC_VECTOR (2 downto 0);
    signal input1_M_imag_1_addr_1_gep_fu_154_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal input1_M_imag_1_addr_1_reg_499 : STD_LOGIC_VECTOR (2 downto 0);
    signal input1_M_imag_2_addr_1_gep_fu_162_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal input1_M_imag_2_addr_1_reg_504 : STD_LOGIC_VECTOR (2 downto 0);
    signal input1_M_real_0_addr_2_gep_fu_170_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal input1_M_real_0_addr_2_reg_509 : STD_LOGIC_VECTOR (2 downto 0);
    signal input1_M_real_1_addr_2_gep_fu_178_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal input1_M_real_1_addr_2_reg_514 : STD_LOGIC_VECTOR (2 downto 0);
    signal input1_M_real_2_addr_2_gep_fu_186_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal input1_M_real_2_addr_2_reg_519 : STD_LOGIC_VECTOR (2 downto 0);
    signal input1_M_imag_0_addr_2_gep_fu_194_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal input1_M_imag_0_addr_2_reg_524 : STD_LOGIC_VECTOR (2 downto 0);
    signal input1_M_imag_1_addr_2_gep_fu_202_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal input1_M_imag_1_addr_2_reg_529 : STD_LOGIC_VECTOR (2 downto 0);
    signal input1_M_imag_2_addr_2_gep_fu_210_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal input1_M_imag_2_addr_2_reg_534 : STD_LOGIC_VECTOR (2 downto 0);
    signal input1_M_real_0_addr_3_gep_fu_218_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal input1_M_real_0_addr_3_reg_539 : STD_LOGIC_VECTOR (2 downto 0);
    signal input1_M_real_1_addr_3_gep_fu_226_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal input1_M_real_1_addr_3_reg_544 : STD_LOGIC_VECTOR (2 downto 0);
    signal input1_M_real_2_addr_3_gep_fu_234_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal input1_M_real_2_addr_3_reg_549 : STD_LOGIC_VECTOR (2 downto 0);
    signal input1_M_imag_0_addr_3_gep_fu_242_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal input1_M_imag_0_addr_3_reg_554 : STD_LOGIC_VECTOR (2 downto 0);
    signal input1_M_imag_1_addr_3_gep_fu_250_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal input1_M_imag_1_addr_3_reg_559 : STD_LOGIC_VECTOR (2 downto 0);
    signal input1_M_imag_2_addr_3_gep_fu_258_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal input1_M_imag_2_addr_3_reg_564 : STD_LOGIC_VECTOR (2 downto 0);
    signal input1_M_real_0_addr_4_gep_fu_266_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal input1_M_real_0_addr_4_reg_569 : STD_LOGIC_VECTOR (2 downto 0);
    signal input1_M_real_1_addr_4_gep_fu_274_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal input1_M_real_1_addr_4_reg_574 : STD_LOGIC_VECTOR (2 downto 0);
    signal input1_M_real_2_addr_4_gep_fu_282_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal input1_M_real_2_addr_4_reg_579 : STD_LOGIC_VECTOR (2 downto 0);
    signal input1_M_imag_0_addr_4_gep_fu_290_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal input1_M_imag_0_addr_4_reg_584 : STD_LOGIC_VECTOR (2 downto 0);
    signal input1_M_imag_1_addr_4_gep_fu_298_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal input1_M_imag_1_addr_4_reg_589 : STD_LOGIC_VECTOR (2 downto 0);
    signal input1_M_imag_2_addr_4_gep_fu_306_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal input1_M_imag_2_addr_4_reg_594 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond1_fu_432_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal index_1_fu_438_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal index_1_reg_603 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_444_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_608 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_reg_608_pp0_it1 : STD_LOGIC_VECTOR (63 downto 0);
    signal input2_M_real_load_reg_625 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_402_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_x_M_real_read_assign_reg_630 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_414_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_x_M_imag_read_assign_reg_635 : STD_LOGIC_VECTOR (31 downto 0);
    signal input2_M_imag_load_reg_640 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_pp0_stg4_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_258 : BOOLEAN;
    signal index_phi_fu_390_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_cseq_ST_pp0_stg3_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_281 : BOOLEAN;
    signal grp_fu_398_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_398_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_402_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_414_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_398_ce : STD_LOGIC;
    signal ap_sig_cseq_ST_st11_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_330 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);

    component TopAdder_fadd_32ns_32ns_32_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component TopAdder_mux_3to1_sel2_32_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component TopAdder_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        ap_return : IN STD_LOGIC_VECTOR (31 downto 0);
        output_M_real_address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        output_M_real_ce0 : IN STD_LOGIC;
        output_M_real_we0 : IN STD_LOGIC;
        output_M_real_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_M_imag_address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        output_M_imag_ce0 : IN STD_LOGIC;
        output_M_imag_we0 : IN STD_LOGIC;
        output_M_imag_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        input1_M_real_0_address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        input1_M_real_0_ce0 : IN STD_LOGIC;
        input1_M_real_0_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        input1_M_real_1_address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        input1_M_real_1_ce0 : IN STD_LOGIC;
        input1_M_real_1_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        input1_M_real_2_address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        input1_M_real_2_ce0 : IN STD_LOGIC;
        input1_M_real_2_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        input1_M_imag_0_address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        input1_M_imag_0_ce0 : IN STD_LOGIC;
        input1_M_imag_0_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        input1_M_imag_1_address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        input1_M_imag_1_ce0 : IN STD_LOGIC;
        input1_M_imag_1_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        input1_M_imag_2_address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        input1_M_imag_2_ce0 : IN STD_LOGIC;
        input1_M_imag_2_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        input2_M_real_address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        input2_M_real_ce0 : IN STD_LOGIC;
        input2_M_real_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        input2_M_imag_address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        input2_M_imag_ce0 : IN STD_LOGIC;
        input2_M_imag_q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    TopAdder_AXILiteS_s_axi_U : component TopAdder_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => TopAdder_AXILiteS_s_axi_U_ap_dummy_ce,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        ap_return => ap_return,
        output_M_real_address0 => output_M_real_address0,
        output_M_real_ce0 => output_M_real_ce0,
        output_M_real_we0 => output_M_real_we0,
        output_M_real_d0 => output_M_real_d0,
        output_M_imag_address0 => output_M_imag_address0,
        output_M_imag_ce0 => output_M_imag_ce0,
        output_M_imag_we0 => output_M_imag_we0,
        output_M_imag_d0 => output_M_imag_d0,
        input1_M_real_0_address0 => input1_M_real_0_address0,
        input1_M_real_0_ce0 => input1_M_real_0_ce0,
        input1_M_real_0_q0 => input1_M_real_0_q0,
        input1_M_real_1_address0 => input1_M_real_1_address0,
        input1_M_real_1_ce0 => input1_M_real_1_ce0,
        input1_M_real_1_q0 => input1_M_real_1_q0,
        input1_M_real_2_address0 => input1_M_real_2_address0,
        input1_M_real_2_ce0 => input1_M_real_2_ce0,
        input1_M_real_2_q0 => input1_M_real_2_q0,
        input1_M_imag_0_address0 => input1_M_imag_0_address0,
        input1_M_imag_0_ce0 => input1_M_imag_0_ce0,
        input1_M_imag_0_q0 => input1_M_imag_0_q0,
        input1_M_imag_1_address0 => input1_M_imag_1_address0,
        input1_M_imag_1_ce0 => input1_M_imag_1_ce0,
        input1_M_imag_1_q0 => input1_M_imag_1_q0,
        input1_M_imag_2_address0 => input1_M_imag_2_address0,
        input1_M_imag_2_ce0 => input1_M_imag_2_ce0,
        input1_M_imag_2_q0 => input1_M_imag_2_q0,
        input2_M_real_address0 => input2_M_real_address0,
        input2_M_real_ce0 => input2_M_real_ce0,
        input2_M_real_q0 => input2_M_real_q0,
        input2_M_imag_address0 => input2_M_imag_address0,
        input2_M_imag_ce0 => input2_M_imag_ce0,
        input2_M_imag_q0 => input2_M_imag_q0);

    TopAdder_fadd_32ns_32ns_32_5_full_dsp_U0 : component TopAdder_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_398_p0,
        din1 => grp_fu_398_p1,
        ce => grp_fu_398_ce,
        dout => grp_fu_398_p2);

    TopAdder_mux_3to1_sel2_32_1_U1 : component TopAdder_mux_3to1_sel2_32_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din1 => input1_M_real_0_q0,
        din2 => input1_M_real_1_q0,
        din3 => input1_M_real_2_q0,
        din4 => grp_fu_402_p4,
        dout => grp_fu_402_p5);

    TopAdder_mux_3to1_sel2_32_1_U2 : component TopAdder_mux_3to1_sel2_32_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din1 => input1_M_imag_0_q0,
        din2 => input1_M_imag_1_q0,
        din3 => input1_M_imag_2_q0,
        din4 => grp_fu_414_p4,
        dout => grp_fu_414_p5);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_const_lv1_0 = exitcond1_fu_432_p2)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((exitcond1_reg_599 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_5))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_5) and not((exitcond1_reg_599 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- index_reg_386 assign process. --
    index_reg_386_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond1_reg_599 = ap_const_lv1_0))) then 
                index_reg_386 <= index_1_reg_603;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                index_reg_386 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1)) then
                ap_reg_ppstg_exitcond1_reg_599_pp0_it1 <= exitcond1_reg_599;
                ap_reg_ppstg_index_reg_386_pp0_it1 <= index_reg_386;
                    ap_reg_ppstg_tmp_reg_608_pp0_it1(1 downto 0) <= tmp_reg_608(1 downto 0);
                exitcond1_reg_599 <= exitcond1_fu_432_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then
                index_1_reg_603 <= index_1_fu_438_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3) and (exitcond1_reg_599 = ap_const_lv1_0))) then
                input2_M_imag_load_reg_640 <= input2_M_imag_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (exitcond1_reg_599 = ap_const_lv1_0))) then
                input2_M_real_load_reg_625 <= input2_M_real_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (exitcond1_reg_599 = ap_const_lv1_0))) then
                p_x_M_imag_read_assign_reg_635 <= grp_fu_414_p5;
                p_x_M_real_read_assign_reg_630 <= grp_fu_402_p5;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (ap_reg_ppstg_exitcond1_reg_599_pp0_it1 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_reg_ppstg_exitcond1_reg_599_pp0_it1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)))) then
                reg_426 <= grp_fu_398_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_lv1_0 = exitcond1_fu_432_p2))) then
                    tmp_reg_608(1 downto 0) <= tmp_fu_444_p1(1 downto 0);
            end if;
        end if;
    end process;
    input1_M_real_0_addr_reg_449(2 downto 0) <= "000";
    input1_M_real_1_addr_reg_454(2 downto 0) <= "000";
    input1_M_real_2_addr_reg_459(2 downto 0) <= "000";
    input1_M_imag_0_addr_reg_464(2 downto 0) <= "000";
    input1_M_imag_1_addr_reg_469(2 downto 0) <= "000";
    input1_M_imag_2_addr_reg_474(2 downto 0) <= "000";
    input1_M_real_0_addr_1_reg_479(2 downto 0) <= "001";
    input1_M_real_1_addr_1_reg_484(2 downto 0) <= "001";
    input1_M_real_2_addr_1_reg_489(2 downto 0) <= "001";
    input1_M_imag_0_addr_1_reg_494(2 downto 0) <= "001";
    input1_M_imag_1_addr_1_reg_499(2 downto 0) <= "001";
    input1_M_imag_2_addr_1_reg_504(2 downto 0) <= "001";
    input1_M_real_0_addr_2_reg_509(2 downto 0) <= "010";
    input1_M_real_1_addr_2_reg_514(2 downto 0) <= "010";
    input1_M_real_2_addr_2_reg_519(2 downto 0) <= "010";
    input1_M_imag_0_addr_2_reg_524(2 downto 0) <= "010";
    input1_M_imag_1_addr_2_reg_529(2 downto 0) <= "010";
    input1_M_imag_2_addr_2_reg_534(2 downto 0) <= "010";
    input1_M_real_0_addr_3_reg_539(2 downto 0) <= "011";
    input1_M_real_1_addr_3_reg_544(2 downto 0) <= "011";
    input1_M_real_2_addr_3_reg_549(2 downto 0) <= "011";
    input1_M_imag_0_addr_3_reg_554(2 downto 0) <= "011";
    input1_M_imag_1_addr_3_reg_559(2 downto 0) <= "011";
    input1_M_imag_2_addr_3_reg_564(2 downto 0) <= "011";
    input1_M_real_0_addr_4_reg_569(2 downto 0) <= "100";
    input1_M_real_1_addr_4_reg_574(2 downto 0) <= "100";
    input1_M_real_2_addr_4_reg_579(2 downto 0) <= "100";
    input1_M_imag_0_addr_4_reg_584(2 downto 0) <= "100";
    input1_M_imag_1_addr_4_reg_589(2 downto 0) <= "100";
    input1_M_imag_2_addr_4_reg_594(2 downto 0) <= "100";
    tmp_reg_608(63 downto 2) <= "00000000000000000000000000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_reg_608_pp0_it1(63 downto 2) <= "00000000000000000000000000000000000000000000000000000000000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, exitcond1_fu_432_p2, ap_sig_cseq_ST_pp0_stg3_fsm_4)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_pp0_stg0_fsm_1 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_const_lv1_0 = exitcond1_fu_432_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg1_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st11_fsm_6;
                end if;
            when ap_ST_pp0_stg1_fsm_2 => 
                ap_NS_fsm <= ap_ST_pp0_stg2_fsm_3;
            when ap_ST_pp0_stg2_fsm_3 => 
                ap_NS_fsm <= ap_ST_pp0_stg3_fsm_4;
            when ap_ST_pp0_stg3_fsm_4 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it0))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg4_fsm_5;
                else
                    ap_NS_fsm <= ap_ST_st11_fsm_6;
                end if;
            when ap_ST_pp0_stg4_fsm_5 => 
                ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
            when ap_ST_st11_fsm_6 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    TopAdder_AXILiteS_s_axi_U_ap_dummy_ce <= ap_const_logic_1;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_sig_cseq_ST_st11_fsm_6)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_6)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st11_fsm_6)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_6)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= ap_const_lv32_0;

    -- ap_rst_n_inv assign process. --
    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    -- ap_sig_bdd_129 assign process. --
    ap_sig_bdd_129_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_129 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_142 assign process. --
    ap_sig_bdd_142_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_142 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_155 assign process. --
    ap_sig_bdd_155_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_155 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_25 assign process. --
    ap_sig_bdd_25_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_25 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_258 assign process. --
    ap_sig_bdd_258_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_258 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_281 assign process. --
    ap_sig_bdd_281_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_281 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_330 assign process. --
    ap_sig_bdd_330_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_330 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_1 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_1_assign_proc : process(ap_sig_bdd_129)
    begin
        if (ap_sig_bdd_129) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg1_fsm_2 assign process. --
    ap_sig_cseq_ST_pp0_stg1_fsm_2_assign_proc : process(ap_sig_bdd_142)
    begin
        if (ap_sig_bdd_142) then 
            ap_sig_cseq_ST_pp0_stg1_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg1_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg2_fsm_3 assign process. --
    ap_sig_cseq_ST_pp0_stg2_fsm_3_assign_proc : process(ap_sig_bdd_155)
    begin
        if (ap_sig_bdd_155) then 
            ap_sig_cseq_ST_pp0_stg2_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg2_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg3_fsm_4 assign process. --
    ap_sig_cseq_ST_pp0_stg3_fsm_4_assign_proc : process(ap_sig_bdd_281)
    begin
        if (ap_sig_bdd_281) then 
            ap_sig_cseq_ST_pp0_stg3_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg3_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg4_fsm_5 assign process. --
    ap_sig_cseq_ST_pp0_stg4_fsm_5_assign_proc : process(ap_sig_bdd_258)
    begin
        if (ap_sig_bdd_258) then 
            ap_sig_cseq_ST_pp0_stg4_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg4_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st11_fsm_6 assign process. --
    ap_sig_cseq_ST_st11_fsm_6_assign_proc : process(ap_sig_bdd_330)
    begin
        if (ap_sig_bdd_330) then 
            ap_sig_cseq_ST_st11_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_25)
    begin
        if (ap_sig_bdd_25) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_432_p2 <= "1" when (index_phi_fu_390_p4 = ap_const_lv2_3) else "0";
    grp_fu_398_ce <= ap_const_logic_1;

    -- grp_fu_398_p0 assign process. --
    grp_fu_398_p0_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg2_fsm_3, p_x_M_real_read_assign_reg_630, p_x_M_imag_read_assign_reg_635, ap_sig_cseq_ST_pp0_stg3_fsm_4)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) then 
                grp_fu_398_p0 <= p_x_M_imag_read_assign_reg_635;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) then 
                grp_fu_398_p0 <= p_x_M_real_read_assign_reg_630;
            else 
                grp_fu_398_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_398_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_398_p1 assign process. --
    grp_fu_398_p1_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg2_fsm_3, input2_M_real_load_reg_625, input2_M_imag_load_reg_640, ap_sig_cseq_ST_pp0_stg3_fsm_4)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) then 
                grp_fu_398_p1 <= input2_M_imag_load_reg_640;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) then 
                grp_fu_398_p1 <= input2_M_real_load_reg_625;
            else 
                grp_fu_398_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_398_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_402_p4 assign process. --
    grp_fu_402_p4_assign_proc : process(index_reg_386, ap_reg_ppstg_index_reg_386_pp0_it1, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg4_fsm_5, ap_sig_cseq_ST_pp0_stg3_fsm_4)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)))) then 
            grp_fu_402_p4 <= ap_reg_ppstg_index_reg_386_pp0_it1;
        elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_5)))) then 
            grp_fu_402_p4 <= index_reg_386;
        else 
            grp_fu_402_p4 <= "XX";
        end if; 
    end process;


    -- grp_fu_414_p4 assign process. --
    grp_fu_414_p4_assign_proc : process(index_reg_386, ap_reg_ppstg_index_reg_386_pp0_it1, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg4_fsm_5, ap_sig_cseq_ST_pp0_stg3_fsm_4)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)))) then 
            grp_fu_414_p4 <= ap_reg_ppstg_index_reg_386_pp0_it1;
        elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_5)))) then 
            grp_fu_414_p4 <= index_reg_386;
        else 
            grp_fu_414_p4 <= "XX";
        end if; 
    end process;

    index_1_fu_438_p2 <= std_logic_vector(unsigned(index_phi_fu_390_p4) + unsigned(ap_const_lv2_1));

    -- index_phi_fu_390_p4 assign process. --
    index_phi_fu_390_p4_assign_proc : process(index_reg_386, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, exitcond1_reg_599, index_1_reg_603)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond1_reg_599 = ap_const_lv1_0))) then 
            index_phi_fu_390_p4 <= index_1_reg_603;
        else 
            index_phi_fu_390_p4 <= index_reg_386;
        end if; 
    end process;

    input1_M_imag_0_addr_1_gep_fu_146_p3 <= ap_const_lv64_1(3 - 1 downto 0);
    input1_M_imag_0_addr_2_gep_fu_194_p3 <= ap_const_lv64_2(3 - 1 downto 0);
    input1_M_imag_0_addr_3_gep_fu_242_p3 <= ap_const_lv64_3(3 - 1 downto 0);
    input1_M_imag_0_addr_4_gep_fu_290_p3 <= ap_const_lv64_4(3 - 1 downto 0);
    input1_M_imag_0_addr_gep_fu_98_p3 <= ap_const_lv64_0(3 - 1 downto 0);

    -- input1_M_imag_0_address0 assign process. --
    input1_M_imag_0_address0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, input1_M_imag_0_addr_reg_464, input1_M_imag_0_addr_1_reg_494, input1_M_imag_0_addr_2_reg_524, input1_M_imag_0_addr_3_reg_554, input1_M_imag_0_addr_4_reg_584, ap_sig_cseq_ST_pp0_stg4_fsm_5, ap_sig_cseq_ST_pp0_stg3_fsm_4)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3))) then 
            input1_M_imag_0_address0 <= input1_M_imag_0_addr_1_reg_494;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2))) then 
            input1_M_imag_0_address0 <= input1_M_imag_0_addr_reg_464;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_5))) then 
            input1_M_imag_0_address0 <= input1_M_imag_0_addr_3_reg_554;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4))) then 
            input1_M_imag_0_address0 <= input1_M_imag_0_addr_2_reg_524;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            input1_M_imag_0_address0 <= input1_M_imag_0_addr_4_reg_584;
        else 
            input1_M_imag_0_address0 <= "XXX";
        end if; 
    end process;


    -- input1_M_imag_0_ce0 assign process. --
    input1_M_imag_0_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg4_fsm_5, ap_sig_cseq_ST_pp0_stg3_fsm_4)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_5)))) then 
            input1_M_imag_0_ce0 <= ap_const_logic_1;
        else 
            input1_M_imag_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input1_M_imag_1_addr_1_gep_fu_154_p3 <= ap_const_lv64_1(3 - 1 downto 0);
    input1_M_imag_1_addr_2_gep_fu_202_p3 <= ap_const_lv64_2(3 - 1 downto 0);
    input1_M_imag_1_addr_3_gep_fu_250_p3 <= ap_const_lv64_3(3 - 1 downto 0);
    input1_M_imag_1_addr_4_gep_fu_298_p3 <= ap_const_lv64_4(3 - 1 downto 0);
    input1_M_imag_1_addr_gep_fu_106_p3 <= ap_const_lv64_0(3 - 1 downto 0);

    -- input1_M_imag_1_address0 assign process. --
    input1_M_imag_1_address0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, input1_M_imag_1_addr_reg_469, input1_M_imag_1_addr_1_reg_499, input1_M_imag_1_addr_2_reg_529, input1_M_imag_1_addr_3_reg_559, input1_M_imag_1_addr_4_reg_589, ap_sig_cseq_ST_pp0_stg4_fsm_5, ap_sig_cseq_ST_pp0_stg3_fsm_4)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3))) then 
            input1_M_imag_1_address0 <= input1_M_imag_1_addr_1_reg_499;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2))) then 
            input1_M_imag_1_address0 <= input1_M_imag_1_addr_reg_469;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_5))) then 
            input1_M_imag_1_address0 <= input1_M_imag_1_addr_3_reg_559;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4))) then 
            input1_M_imag_1_address0 <= input1_M_imag_1_addr_2_reg_529;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            input1_M_imag_1_address0 <= input1_M_imag_1_addr_4_reg_589;
        else 
            input1_M_imag_1_address0 <= "XXX";
        end if; 
    end process;


    -- input1_M_imag_1_ce0 assign process. --
    input1_M_imag_1_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg4_fsm_5, ap_sig_cseq_ST_pp0_stg3_fsm_4)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_5)))) then 
            input1_M_imag_1_ce0 <= ap_const_logic_1;
        else 
            input1_M_imag_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input1_M_imag_2_addr_1_gep_fu_162_p3 <= ap_const_lv64_1(3 - 1 downto 0);
    input1_M_imag_2_addr_2_gep_fu_210_p3 <= ap_const_lv64_2(3 - 1 downto 0);
    input1_M_imag_2_addr_3_gep_fu_258_p3 <= ap_const_lv64_3(3 - 1 downto 0);
    input1_M_imag_2_addr_4_gep_fu_306_p3 <= ap_const_lv64_4(3 - 1 downto 0);
    input1_M_imag_2_addr_gep_fu_114_p3 <= ap_const_lv64_0(3 - 1 downto 0);

    -- input1_M_imag_2_address0 assign process. --
    input1_M_imag_2_address0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, input1_M_imag_2_addr_reg_474, input1_M_imag_2_addr_1_reg_504, input1_M_imag_2_addr_2_reg_534, input1_M_imag_2_addr_3_reg_564, input1_M_imag_2_addr_4_reg_594, ap_sig_cseq_ST_pp0_stg4_fsm_5, ap_sig_cseq_ST_pp0_stg3_fsm_4)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3))) then 
            input1_M_imag_2_address0 <= input1_M_imag_2_addr_1_reg_504;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2))) then 
            input1_M_imag_2_address0 <= input1_M_imag_2_addr_reg_474;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_5))) then 
            input1_M_imag_2_address0 <= input1_M_imag_2_addr_3_reg_564;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4))) then 
            input1_M_imag_2_address0 <= input1_M_imag_2_addr_2_reg_534;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            input1_M_imag_2_address0 <= input1_M_imag_2_addr_4_reg_594;
        else 
            input1_M_imag_2_address0 <= "XXX";
        end if; 
    end process;


    -- input1_M_imag_2_ce0 assign process. --
    input1_M_imag_2_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg4_fsm_5, ap_sig_cseq_ST_pp0_stg3_fsm_4)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_5)))) then 
            input1_M_imag_2_ce0 <= ap_const_logic_1;
        else 
            input1_M_imag_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input1_M_real_0_addr_1_gep_fu_122_p3 <= ap_const_lv64_1(3 - 1 downto 0);
    input1_M_real_0_addr_2_gep_fu_170_p3 <= ap_const_lv64_2(3 - 1 downto 0);
    input1_M_real_0_addr_3_gep_fu_218_p3 <= ap_const_lv64_3(3 - 1 downto 0);
    input1_M_real_0_addr_4_gep_fu_266_p3 <= ap_const_lv64_4(3 - 1 downto 0);
    input1_M_real_0_addr_gep_fu_74_p3 <= ap_const_lv64_0(3 - 1 downto 0);

    -- input1_M_real_0_address0 assign process. --
    input1_M_real_0_address0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, input1_M_real_0_addr_reg_449, input1_M_real_0_addr_1_reg_479, input1_M_real_0_addr_2_reg_509, input1_M_real_0_addr_3_reg_539, input1_M_real_0_addr_4_reg_569, ap_sig_cseq_ST_pp0_stg4_fsm_5, ap_sig_cseq_ST_pp0_stg3_fsm_4)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3))) then 
            input1_M_real_0_address0 <= input1_M_real_0_addr_1_reg_479;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2))) then 
            input1_M_real_0_address0 <= input1_M_real_0_addr_reg_449;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_5))) then 
            input1_M_real_0_address0 <= input1_M_real_0_addr_3_reg_539;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4))) then 
            input1_M_real_0_address0 <= input1_M_real_0_addr_2_reg_509;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            input1_M_real_0_address0 <= input1_M_real_0_addr_4_reg_569;
        else 
            input1_M_real_0_address0 <= "XXX";
        end if; 
    end process;


    -- input1_M_real_0_ce0 assign process. --
    input1_M_real_0_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg4_fsm_5, ap_sig_cseq_ST_pp0_stg3_fsm_4)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_5)))) then 
            input1_M_real_0_ce0 <= ap_const_logic_1;
        else 
            input1_M_real_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input1_M_real_1_addr_1_gep_fu_130_p3 <= ap_const_lv64_1(3 - 1 downto 0);
    input1_M_real_1_addr_2_gep_fu_178_p3 <= ap_const_lv64_2(3 - 1 downto 0);
    input1_M_real_1_addr_3_gep_fu_226_p3 <= ap_const_lv64_3(3 - 1 downto 0);
    input1_M_real_1_addr_4_gep_fu_274_p3 <= ap_const_lv64_4(3 - 1 downto 0);
    input1_M_real_1_addr_gep_fu_82_p3 <= ap_const_lv64_0(3 - 1 downto 0);

    -- input1_M_real_1_address0 assign process. --
    input1_M_real_1_address0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, input1_M_real_1_addr_reg_454, input1_M_real_1_addr_1_reg_484, input1_M_real_1_addr_2_reg_514, input1_M_real_1_addr_3_reg_544, input1_M_real_1_addr_4_reg_574, ap_sig_cseq_ST_pp0_stg4_fsm_5, ap_sig_cseq_ST_pp0_stg3_fsm_4)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3))) then 
            input1_M_real_1_address0 <= input1_M_real_1_addr_1_reg_484;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2))) then 
            input1_M_real_1_address0 <= input1_M_real_1_addr_reg_454;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_5))) then 
            input1_M_real_1_address0 <= input1_M_real_1_addr_3_reg_544;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4))) then 
            input1_M_real_1_address0 <= input1_M_real_1_addr_2_reg_514;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            input1_M_real_1_address0 <= input1_M_real_1_addr_4_reg_574;
        else 
            input1_M_real_1_address0 <= "XXX";
        end if; 
    end process;


    -- input1_M_real_1_ce0 assign process. --
    input1_M_real_1_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg4_fsm_5, ap_sig_cseq_ST_pp0_stg3_fsm_4)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_5)))) then 
            input1_M_real_1_ce0 <= ap_const_logic_1;
        else 
            input1_M_real_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input1_M_real_2_addr_1_gep_fu_138_p3 <= ap_const_lv64_1(3 - 1 downto 0);
    input1_M_real_2_addr_2_gep_fu_186_p3 <= ap_const_lv64_2(3 - 1 downto 0);
    input1_M_real_2_addr_3_gep_fu_234_p3 <= ap_const_lv64_3(3 - 1 downto 0);
    input1_M_real_2_addr_4_gep_fu_282_p3 <= ap_const_lv64_4(3 - 1 downto 0);
    input1_M_real_2_addr_gep_fu_90_p3 <= ap_const_lv64_0(3 - 1 downto 0);

    -- input1_M_real_2_address0 assign process. --
    input1_M_real_2_address0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, input1_M_real_2_addr_reg_459, input1_M_real_2_addr_1_reg_489, input1_M_real_2_addr_2_reg_519, input1_M_real_2_addr_3_reg_549, input1_M_real_2_addr_4_reg_579, ap_sig_cseq_ST_pp0_stg4_fsm_5, ap_sig_cseq_ST_pp0_stg3_fsm_4)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3))) then 
            input1_M_real_2_address0 <= input1_M_real_2_addr_1_reg_489;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2))) then 
            input1_M_real_2_address0 <= input1_M_real_2_addr_reg_459;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_5))) then 
            input1_M_real_2_address0 <= input1_M_real_2_addr_3_reg_549;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4))) then 
            input1_M_real_2_address0 <= input1_M_real_2_addr_2_reg_519;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            input1_M_real_2_address0 <= input1_M_real_2_addr_4_reg_579;
        else 
            input1_M_real_2_address0 <= "XXX";
        end if; 
    end process;


    -- input1_M_real_2_ce0 assign process. --
    input1_M_real_2_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg4_fsm_5, ap_sig_cseq_ST_pp0_stg3_fsm_4)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_5)))) then 
            input1_M_real_2_ce0 <= ap_const_logic_1;
        else 
            input1_M_real_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input2_M_imag_address0 <= tmp_reg_608(2 - 1 downto 0);

    -- input2_M_imag_ce0 assign process. --
    input2_M_imag_ce0_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_2)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2))) then 
            input2_M_imag_ce0 <= ap_const_logic_1;
        else 
            input2_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input2_M_real_address0 <= tmp_fu_444_p1(2 - 1 downto 0);

    -- input2_M_real_ce0 assign process. --
    input2_M_real_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            input2_M_real_ce0 <= ap_const_logic_1;
        else 
            input2_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_M_imag_address0 <= ap_reg_ppstg_tmp_reg_608_pp0_it1(2 - 1 downto 0);

    -- output_M_imag_ce0 assign process. --
    output_M_imag_ce0_assign_proc : process(ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg3_fsm_4)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4))) then 
            output_M_imag_ce0 <= ap_const_logic_1;
        else 
            output_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_M_imag_d0 <= reg_426;

    -- output_M_imag_we0 assign process. --
    output_M_imag_we0_assign_proc : process(ap_reg_ppiten_pp0_it1, ap_reg_ppstg_exitcond1_reg_599_pp0_it1, ap_sig_cseq_ST_pp0_stg3_fsm_4)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_reg_ppstg_exitcond1_reg_599_pp0_it1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)))) then 
            output_M_imag_we0 <= ap_const_logic_1;
        else 
            output_M_imag_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_M_real_address0 <= ap_reg_ppstg_tmp_reg_608_pp0_it1(2 - 1 downto 0);

    -- output_M_real_ce0 assign process. --
    output_M_real_ce0_assign_proc : process(ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg2_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3))) then 
            output_M_real_ce0 <= ap_const_logic_1;
        else 
            output_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_M_real_d0 <= reg_426;

    -- output_M_real_we0 assign process. --
    output_M_real_we0_assign_proc : process(ap_reg_ppiten_pp0_it1, ap_reg_ppstg_exitcond1_reg_599_pp0_it1, ap_sig_cseq_ST_pp0_stg2_fsm_3)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_reg_ppstg_exitcond1_reg_599_pp0_it1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)))) then 
            output_M_real_we0 <= ap_const_logic_1;
        else 
            output_M_real_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_444_p1 <= std_logic_vector(resize(unsigned(index_phi_fu_390_p4),64));
end behav;
