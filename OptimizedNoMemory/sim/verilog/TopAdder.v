// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="TopAdder,hls_ip_2015_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=11,HLS_SYN_TPT=none,HLS_SYN_MEM=12,HLS_SYN_DSP=4,HLS_SYN_FF=1166,HLS_SYN_LUT=1319}" *)

module TopAdder (
        ap_clk,
        ap_rst_n,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 3'b1;
parameter    ap_ST_pp0_stg0_fsm_1 = 3'b10;
parameter    ap_ST_st10_fsm_2 = 3'b100;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_true = 1'b1;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    ap_const_int64_8 = 8;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 8;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv2_3 = 2'b11;
parameter    ap_const_lv2_1 = 2'b1;
parameter    ap_const_lv5_4 = 5'b100;
parameter    ap_const_lv32_2 = 32'b10;
parameter    C_S_AXI_AXILITES_WSTRB_WIDTH = (C_S_AXI_AXILITES_DATA_WIDTH / ap_const_int64_8);
parameter    C_S_AXI_WSTRB_WIDTH = (C_S_AXI_DATA_WIDTH / ap_const_int64_8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1 : 0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1 : 0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1 : 0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1 : 0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1 : 0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm = 3'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_21;
reg    ap_ready;
wire   [1:0] output_M_real_address0;
reg    output_M_real_ce0;
reg    output_M_real_we0;
wire   [31:0] output_M_real_d0;
wire   [1:0] output_M_imag_address0;
reg    output_M_imag_ce0;
reg    output_M_imag_we0;
wire   [31:0] output_M_imag_d0;
wire   [3:0] input1_M_real_address0;
reg    input1_M_real_ce0;
wire   [31:0] input1_M_real_q0;
wire   [3:0] input1_M_imag_address0;
reg    input1_M_imag_ce0;
wire   [31:0] input1_M_imag_q0;
wire   [1:0] input2_M_real_address0;
reg    input2_M_real_ce0;
wire   [31:0] input2_M_real_q0;
wire   [1:0] input2_M_imag_address0;
reg    input2_M_imag_ce0;
wire   [31:0] input2_M_imag_q0;
wire   [31:0] ap_return;
wire    TopAdder_AXILiteS_s_axi_U_ap_dummy_ce;
reg   [1:0] index_reg_144;
wire   [0:0] exitcond1_fu_163_p2;
reg   [0:0] exitcond1_reg_215;
reg    ap_sig_cseq_ST_pp0_stg0_fsm_1;
reg    ap_sig_bdd_106;
reg    ap_reg_ppiten_pp0_it0 = 1'b0;
reg    ap_reg_ppiten_pp0_it1 = 1'b0;
reg    ap_reg_ppiten_pp0_it2 = 1'b0;
reg    ap_reg_ppiten_pp0_it3 = 1'b0;
reg    ap_reg_ppiten_pp0_it4 = 1'b0;
reg    ap_reg_ppiten_pp0_it5 = 1'b0;
reg    ap_reg_ppiten_pp0_it6 = 1'b0;
reg    ap_reg_ppiten_pp0_it7 = 1'b0;
reg   [0:0] ap_reg_ppstg_exitcond1_reg_215_pp0_it1;
reg   [0:0] ap_reg_ppstg_exitcond1_reg_215_pp0_it2;
reg   [0:0] ap_reg_ppstg_exitcond1_reg_215_pp0_it3;
reg   [0:0] ap_reg_ppstg_exitcond1_reg_215_pp0_it4;
reg   [0:0] ap_reg_ppstg_exitcond1_reg_215_pp0_it5;
reg   [0:0] ap_reg_ppstg_exitcond1_reg_215_pp0_it6;
wire   [1:0] index_1_fu_169_p2;
wire   [63:0] tmp_fu_175_p1;
reg   [63:0] tmp_reg_224;
reg   [63:0] ap_reg_ppstg_tmp_reg_224_pp0_it1;
reg   [63:0] ap_reg_ppstg_tmp_reg_224_pp0_it2;
reg   [63:0] ap_reg_ppstg_tmp_reg_224_pp0_it3;
reg   [63:0] ap_reg_ppstg_tmp_reg_224_pp0_it4;
reg   [63:0] ap_reg_ppstg_tmp_reg_224_pp0_it5;
reg   [63:0] ap_reg_ppstg_tmp_reg_224_pp0_it6;
reg   [31:0] input2_M_real_load_reg_250;
reg   [31:0] input2_M_imag_load_reg_255;
reg   [31:0] input1_M_real_load_reg_260;
reg   [31:0] input1_M_imag_load_reg_265;
wire   [31:0] grp_fu_155_p2;
reg   [31:0] p_r_M_real_reg_270;
wire   [31:0] grp_fu_159_p2;
reg   [31:0] p_r_M_imag_reg_275;
wire  signed [63:0] tmp_4_cast_fu_209_p1;
wire   [3:0] tmp_2_fu_185_p3;
wire   [4:0] tmp_cast_fu_181_p1;
wire   [4:0] p_shl_cast_fu_193_p1;
wire   [4:0] tmp_3_fu_197_p2;
wire   [4:0] tmp_4_fu_203_p2;
wire    grp_fu_155_ce;
wire    grp_fu_159_ce;
reg    ap_sig_cseq_ST_st10_fsm_2;
reg    ap_sig_bdd_245;
reg   [2:0] ap_NS_fsm;


TopAdder_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
TopAdder_AXILiteS_s_axi_U(
    .AWVALID( s_axi_AXILiteS_AWVALID ),
    .AWREADY( s_axi_AXILiteS_AWREADY ),
    .AWADDR( s_axi_AXILiteS_AWADDR ),
    .WVALID( s_axi_AXILiteS_WVALID ),
    .WREADY( s_axi_AXILiteS_WREADY ),
    .WDATA( s_axi_AXILiteS_WDATA ),
    .WSTRB( s_axi_AXILiteS_WSTRB ),
    .ARVALID( s_axi_AXILiteS_ARVALID ),
    .ARREADY( s_axi_AXILiteS_ARREADY ),
    .ARADDR( s_axi_AXILiteS_ARADDR ),
    .RVALID( s_axi_AXILiteS_RVALID ),
    .RREADY( s_axi_AXILiteS_RREADY ),
    .RDATA( s_axi_AXILiteS_RDATA ),
    .RRESP( s_axi_AXILiteS_RRESP ),
    .BVALID( s_axi_AXILiteS_BVALID ),
    .BREADY( s_axi_AXILiteS_BREADY ),
    .BRESP( s_axi_AXILiteS_BRESP ),
    .ACLK( ap_clk ),
    .ARESET( ap_rst_n_inv ),
    .ACLK_EN( TopAdder_AXILiteS_s_axi_U_ap_dummy_ce ),
    .ap_start( ap_start ),
    .interrupt( interrupt ),
    .ap_ready( ap_ready ),
    .ap_done( ap_done ),
    .ap_idle( ap_idle ),
    .ap_return( ap_return ),
    .output_M_real_address0( output_M_real_address0 ),
    .output_M_real_ce0( output_M_real_ce0 ),
    .output_M_real_we0( output_M_real_we0 ),
    .output_M_real_d0( output_M_real_d0 ),
    .output_M_imag_address0( output_M_imag_address0 ),
    .output_M_imag_ce0( output_M_imag_ce0 ),
    .output_M_imag_we0( output_M_imag_we0 ),
    .output_M_imag_d0( output_M_imag_d0 ),
    .input1_M_real_address0( input1_M_real_address0 ),
    .input1_M_real_ce0( input1_M_real_ce0 ),
    .input1_M_real_q0( input1_M_real_q0 ),
    .input1_M_imag_address0( input1_M_imag_address0 ),
    .input1_M_imag_ce0( input1_M_imag_ce0 ),
    .input1_M_imag_q0( input1_M_imag_q0 ),
    .input2_M_real_address0( input2_M_real_address0 ),
    .input2_M_real_ce0( input2_M_real_ce0 ),
    .input2_M_real_q0( input2_M_real_q0 ),
    .input2_M_imag_address0( input2_M_imag_address0 ),
    .input2_M_imag_ce0( input2_M_imag_ce0 ),
    .input2_M_imag_q0( input2_M_imag_q0 )
);

TopAdder_fadd_32ns_32ns_32_5_full_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
TopAdder_fadd_32ns_32ns_32_5_full_dsp_U0(
    .clk( ap_clk ),
    .reset( ap_rst_n_inv ),
    .din0( input1_M_real_load_reg_260 ),
    .din1( input2_M_real_load_reg_250 ),
    .ce( grp_fu_155_ce ),
    .dout( grp_fu_155_p2 )
);

TopAdder_fadd_32ns_32ns_32_5_full_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
TopAdder_fadd_32ns_32ns_32_5_full_dsp_U1(
    .clk( ap_clk ),
    .reset( ap_rst_n_inv ),
    .din0( input1_M_imag_load_reg_265 ),
    .din1( input2_M_imag_load_reg_255 ),
    .ce( grp_fu_159_ce ),
    .dout( grp_fu_159_p2 )
);



always @ (posedge ap_clk) begin : ap_ret_ap_CS_fsm
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp0_it0
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(exitcond1_fu_163_p2 == ap_const_lv1_0))) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp0_it1
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (exitcond1_fu_163_p2 == ap_const_lv1_0))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
        end else if ((((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(exitcond1_fu_163_p2 == ap_const_lv1_0)))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp0_it2
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp0_it3
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp0_it4
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp0_it4 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp0_it4 <= ap_reg_ppiten_pp0_it3;
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp0_it5
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp0_it5 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp0_it5 <= ap_reg_ppiten_pp0_it4;
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp0_it6
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp0_it6 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp0_it6 <= ap_reg_ppiten_pp0_it5;
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp0_it7
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp0_it7 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp0_it7 <= ap_reg_ppiten_pp0_it6;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (exitcond1_fu_163_p2 == ap_const_lv1_0))) begin
        index_reg_144 <= index_1_fu_169_p2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        index_reg_144 <= ap_const_lv2_0;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1)) begin
        ap_reg_ppstg_exitcond1_reg_215_pp0_it1 <= exitcond1_reg_215;
        ap_reg_ppstg_tmp_reg_224_pp0_it1[1 : 0] <= tmp_reg_224[1 : 0];
        exitcond1_reg_215 <= exitcond1_fu_163_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_true == ap_true)) begin
        ap_reg_ppstg_exitcond1_reg_215_pp0_it2 <= ap_reg_ppstg_exitcond1_reg_215_pp0_it1;
        ap_reg_ppstg_exitcond1_reg_215_pp0_it3 <= ap_reg_ppstg_exitcond1_reg_215_pp0_it2;
        ap_reg_ppstg_exitcond1_reg_215_pp0_it4 <= ap_reg_ppstg_exitcond1_reg_215_pp0_it3;
        ap_reg_ppstg_exitcond1_reg_215_pp0_it5 <= ap_reg_ppstg_exitcond1_reg_215_pp0_it4;
        ap_reg_ppstg_exitcond1_reg_215_pp0_it6 <= ap_reg_ppstg_exitcond1_reg_215_pp0_it5;
        ap_reg_ppstg_tmp_reg_224_pp0_it2[1 : 0] <= ap_reg_ppstg_tmp_reg_224_pp0_it1[1 : 0];
        ap_reg_ppstg_tmp_reg_224_pp0_it3[1 : 0] <= ap_reg_ppstg_tmp_reg_224_pp0_it2[1 : 0];
        ap_reg_ppstg_tmp_reg_224_pp0_it4[1 : 0] <= ap_reg_ppstg_tmp_reg_224_pp0_it3[1 : 0];
        ap_reg_ppstg_tmp_reg_224_pp0_it5[1 : 0] <= ap_reg_ppstg_tmp_reg_224_pp0_it4[1 : 0];
        ap_reg_ppstg_tmp_reg_224_pp0_it6[1 : 0] <= ap_reg_ppstg_tmp_reg_224_pp0_it5[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (exitcond1_reg_215 == ap_const_lv1_0))) begin
        input1_M_imag_load_reg_265 <= input1_M_imag_q0;
        input1_M_real_load_reg_260 <= input1_M_real_q0;
        input2_M_imag_load_reg_255 <= input2_M_imag_q0;
        input2_M_real_load_reg_250 <= input2_M_real_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_reg_ppstg_exitcond1_reg_215_pp0_it5 == ap_const_lv1_0)) begin
        p_r_M_imag_reg_275 <= grp_fu_159_p2;
        p_r_M_real_reg_270 <= grp_fu_155_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (exitcond1_fu_163_p2 == ap_const_lv1_0))) begin
        tmp_reg_224[1 : 0] <= tmp_fu_175_p1[1 : 0];
    end
end

always @ (ap_sig_cseq_ST_st10_fsm_2) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_2)) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0) begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st10_fsm_2) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_2)) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_106) begin
    if (ap_sig_bdd_106) begin
        ap_sig_cseq_ST_pp0_stg0_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg0_fsm_1 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_245) begin
    if (ap_sig_bdd_245) begin
        ap_sig_cseq_ST_st10_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st10_fsm_2 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_21) begin
    if (ap_sig_bdd_21) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it0) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0))) begin
        input1_M_imag_ce0 = ap_const_logic_1;
    end else begin
        input1_M_imag_ce0 = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it0) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0))) begin
        input1_M_real_ce0 = ap_const_logic_1;
    end else begin
        input1_M_real_ce0 = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it0) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0))) begin
        input2_M_imag_ce0 = ap_const_logic_1;
    end else begin
        input2_M_imag_ce0 = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it0) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0))) begin
        input2_M_real_ce0 = ap_const_logic_1;
    end else begin
        input2_M_real_ce0 = ap_const_logic_0;
    end
end

always @ (ap_reg_ppiten_pp0_it7) begin
    if ((ap_const_logic_1 == ap_reg_ppiten_pp0_it7)) begin
        output_M_imag_ce0 = ap_const_logic_1;
    end else begin
        output_M_imag_ce0 = ap_const_logic_0;
    end
end

always @ (ap_reg_ppiten_pp0_it7 or ap_reg_ppstg_exitcond1_reg_215_pp0_it6) begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it7) & (ap_reg_ppstg_exitcond1_reg_215_pp0_it6 == ap_const_lv1_0))) begin
        output_M_imag_we0 = ap_const_logic_1;
    end else begin
        output_M_imag_we0 = ap_const_logic_0;
    end
end

always @ (ap_reg_ppiten_pp0_it7) begin
    if ((ap_const_logic_1 == ap_reg_ppiten_pp0_it7)) begin
        output_M_real_ce0 = ap_const_logic_1;
    end else begin
        output_M_real_ce0 = ap_const_logic_0;
    end
end

always @ (ap_reg_ppiten_pp0_it7 or ap_reg_ppstg_exitcond1_reg_215_pp0_it6) begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it7) & (ap_reg_ppstg_exitcond1_reg_215_pp0_it6 == ap_const_lv1_0))) begin
        output_M_real_we0 = ap_const_logic_1;
    end else begin
        output_M_real_we0 = ap_const_logic_0;
    end
end
always @ (ap_start or ap_CS_fsm or exitcond1_fu_163_p2 or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or ap_reg_ppiten_pp0_it6 or ap_reg_ppiten_pp0_it7) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_pp0_stg0_fsm_1 : 
        begin
            if ((~((ap_const_logic_1 == ap_reg_ppiten_pp0_it7) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it6)) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(exitcond1_fu_163_p2 == ap_const_lv1_0) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            end else if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(exitcond1_fu_163_p2 == ap_const_lv1_0) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1))) begin
                ap_NS_fsm = ap_ST_st10_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_st10_fsm_2;
            end
        end
        ap_ST_st10_fsm_2 : 
        begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


assign TopAdder_AXILiteS_s_axi_U_ap_dummy_ce = ap_const_logic_1;

assign ap_return = ap_const_lv32_0;


always @ (ap_rst_n) begin
    ap_rst_n_inv = ~ap_rst_n;
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_106 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_21 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_245 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

assign exitcond1_fu_163_p2 = (index_reg_144 == ap_const_lv2_3? 1'b1: 1'b0);

assign grp_fu_155_ce = ap_const_logic_1;

assign grp_fu_159_ce = ap_const_logic_1;

assign index_1_fu_169_p2 = (index_reg_144 + ap_const_lv2_1);

assign input1_M_imag_address0 = tmp_4_cast_fu_209_p1;

assign input1_M_real_address0 = tmp_4_cast_fu_209_p1;

assign input2_M_imag_address0 = tmp_fu_175_p1;

assign input2_M_real_address0 = tmp_fu_175_p1;

assign output_M_imag_address0 = ap_reg_ppstg_tmp_reg_224_pp0_it6;

assign output_M_imag_d0 = p_r_M_imag_reg_275;

assign output_M_real_address0 = ap_reg_ppstg_tmp_reg_224_pp0_it6;

assign output_M_real_d0 = p_r_M_real_reg_270;

assign p_shl_cast_fu_193_p1 = tmp_2_fu_185_p3;

assign tmp_2_fu_185_p3 = {{index_reg_144}, {ap_const_lv2_0}};

assign tmp_3_fu_197_p2 = (tmp_cast_fu_181_p1 + p_shl_cast_fu_193_p1);

assign tmp_4_cast_fu_209_p1 = $signed(tmp_4_fu_203_p2);

assign tmp_4_fu_203_p2 = (tmp_3_fu_197_p2 + ap_const_lv5_4);

assign tmp_cast_fu_181_p1 = index_reg_144;

assign tmp_fu_175_p1 = index_reg_144;
always @ (posedge ap_clk) begin
    tmp_reg_224[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
    ap_reg_ppstg_tmp_reg_224_pp0_it1[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
    ap_reg_ppstg_tmp_reg_224_pp0_it2[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
    ap_reg_ppstg_tmp_reg_224_pp0_it3[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
    ap_reg_ppstg_tmp_reg_224_pp0_it4[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
    ap_reg_ppstg_tmp_reg_224_pp0_it5[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
    ap_reg_ppstg_tmp_reg_224_pp0_it6[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
end



endmodule //TopAdder

