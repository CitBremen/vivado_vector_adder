-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity complexDoubleAdder is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 9;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of complexDoubleAdder is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "complexDoubleAdder,hls_ip_2015_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.232000,HLS_SYN_LAT=15,HLS_SYN_TPT=none,HLS_SYN_MEM=24,HLS_SYN_DSP=6,HLS_SYN_FF=1840,HLS_SYN_LUT=2836}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_pp0_stg0_fsm_1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_st10_fsm_2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_true : BOOLEAN := true;
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_21 : BOOLEAN;
    signal ap_ready : STD_LOGIC;
    signal in1_M_real_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal in1_M_real_ce0 : STD_LOGIC;
    signal in1_M_real_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal in1_M_imag_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal in1_M_imag_ce0 : STD_LOGIC;
    signal in1_M_imag_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal in2_M_real_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal in2_M_real_ce0 : STD_LOGIC;
    signal in2_M_real_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal in2_M_imag_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal in2_M_imag_ce0 : STD_LOGIC;
    signal in2_M_imag_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal out_M_real_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal out_M_real_ce0 : STD_LOGIC;
    signal out_M_real_we0 : STD_LOGIC;
    signal out_M_real_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal out_M_imag_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal out_M_imag_ce0 : STD_LOGIC;
    signal out_M_imag_we0 : STD_LOGIC;
    signal out_M_imag_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal complexDoubleAdder_AXILiteS_s_axi_U_ap_dummy_ce : STD_LOGIC;
    signal index_reg_130 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond_fu_149_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_169 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_106 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it3 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it4 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it5 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it6 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it7 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond_reg_169_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_169_pp0_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_169_pp0_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_169_pp0_it4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_169_pp0_it5 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_169_pp0_it6 : STD_LOGIC_VECTOR (0 downto 0);
    signal index_1_fu_155_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_161_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_178 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_reg_178_pp0_it1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_reg_178_pp0_it2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_reg_178_pp0_it3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_reg_178_pp0_it4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_reg_178_pp0_it5 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_reg_178_pp0_it6 : STD_LOGIC_VECTOR (63 downto 0);
    signal in1_M_real_load_reg_204 : STD_LOGIC_VECTOR (63 downto 0);
    signal in1_M_imag_load_reg_209 : STD_LOGIC_VECTOR (63 downto 0);
    signal in2_M_real_load_reg_214 : STD_LOGIC_VECTOR (63 downto 0);
    signal in2_M_imag_load_reg_219 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_141_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_r_M_real_reg_224 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_145_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_r_M_imag_reg_229 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_141_ce : STD_LOGIC;
    signal grp_fu_145_ce : STD_LOGIC;
    signal ap_sig_cseq_ST_st10_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_223 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);

    component complexDoubleAdder_dadd_64ns_64ns_64_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component complexDoubleAdder_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        ap_return : IN STD_LOGIC_VECTOR (31 downto 0);
        in1_M_real_address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        in1_M_real_ce0 : IN STD_LOGIC;
        in1_M_real_q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        in1_M_imag_address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        in1_M_imag_ce0 : IN STD_LOGIC;
        in1_M_imag_q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        in2_M_real_address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        in2_M_real_ce0 : IN STD_LOGIC;
        in2_M_real_q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        in2_M_imag_address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        in2_M_imag_ce0 : IN STD_LOGIC;
        in2_M_imag_q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        out_M_real_address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        out_M_real_ce0 : IN STD_LOGIC;
        out_M_real_we0 : IN STD_LOGIC;
        out_M_real_d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        out_M_imag_address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        out_M_imag_ce0 : IN STD_LOGIC;
        out_M_imag_we0 : IN STD_LOGIC;
        out_M_imag_d0 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    complexDoubleAdder_AXILiteS_s_axi_U : component complexDoubleAdder_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => complexDoubleAdder_AXILiteS_s_axi_U_ap_dummy_ce,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        ap_return => ap_return,
        in1_M_real_address0 => in1_M_real_address0,
        in1_M_real_ce0 => in1_M_real_ce0,
        in1_M_real_q0 => in1_M_real_q0,
        in1_M_imag_address0 => in1_M_imag_address0,
        in1_M_imag_ce0 => in1_M_imag_ce0,
        in1_M_imag_q0 => in1_M_imag_q0,
        in2_M_real_address0 => in2_M_real_address0,
        in2_M_real_ce0 => in2_M_real_ce0,
        in2_M_real_q0 => in2_M_real_q0,
        in2_M_imag_address0 => in2_M_imag_address0,
        in2_M_imag_ce0 => in2_M_imag_ce0,
        in2_M_imag_q0 => in2_M_imag_q0,
        out_M_real_address0 => out_M_real_address0,
        out_M_real_ce0 => out_M_real_ce0,
        out_M_real_we0 => out_M_real_we0,
        out_M_real_d0 => out_M_real_d0,
        out_M_imag_address0 => out_M_imag_address0,
        out_M_imag_ce0 => out_M_imag_ce0,
        out_M_imag_we0 => out_M_imag_we0,
        out_M_imag_d0 => out_M_imag_d0);

    complexDoubleAdder_dadd_64ns_64ns_64_5_full_dsp_U0 : component complexDoubleAdder_dadd_64ns_64ns_64_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => in1_M_real_load_reg_204,
        din1 => in2_M_real_load_reg_214,
        ce => grp_fu_141_ce,
        dout => grp_fu_141_p2);

    complexDoubleAdder_dadd_64ns_64ns_64_5_full_dsp_U1 : component complexDoubleAdder_dadd_64ns_64ns_64_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => in1_M_imag_load_reg_209,
        din1 => in2_M_imag_load_reg_219,
        ce => grp_fu_145_ce,
        dout => grp_fu_145_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((exitcond_fu_149_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond_fu_149_p2 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((exitcond_fu_149_p2 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it3 assign process. --
    ap_reg_ppiten_pp0_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it4 assign process. --
    ap_reg_ppiten_pp0_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it4 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it4 <= ap_reg_ppiten_pp0_it3;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it5 assign process. --
    ap_reg_ppiten_pp0_it5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it5 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it5 <= ap_reg_ppiten_pp0_it4;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it6 assign process. --
    ap_reg_ppiten_pp0_it6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it6 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it6 <= ap_reg_ppiten_pp0_it5;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it7 assign process. --
    ap_reg_ppiten_pp0_it7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it7 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it7 <= ap_reg_ppiten_pp0_it6;
            end if;
        end if;
    end process;


    -- index_reg_130 assign process. --
    index_reg_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_fu_149_p2 = ap_const_lv1_0))) then 
                index_reg_130 <= index_1_fu_155_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                index_reg_130 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1)) then
                ap_reg_ppstg_exitcond_reg_169_pp0_it1 <= exitcond_reg_169;
                    ap_reg_ppstg_tmp_reg_178_pp0_it1(2 downto 0) <= tmp_reg_178(2 downto 0);
                exitcond_reg_169 <= exitcond_fu_149_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_true = ap_true)) then
                ap_reg_ppstg_exitcond_reg_169_pp0_it2 <= ap_reg_ppstg_exitcond_reg_169_pp0_it1;
                ap_reg_ppstg_exitcond_reg_169_pp0_it3 <= ap_reg_ppstg_exitcond_reg_169_pp0_it2;
                ap_reg_ppstg_exitcond_reg_169_pp0_it4 <= ap_reg_ppstg_exitcond_reg_169_pp0_it3;
                ap_reg_ppstg_exitcond_reg_169_pp0_it5 <= ap_reg_ppstg_exitcond_reg_169_pp0_it4;
                ap_reg_ppstg_exitcond_reg_169_pp0_it6 <= ap_reg_ppstg_exitcond_reg_169_pp0_it5;
                    ap_reg_ppstg_tmp_reg_178_pp0_it2(2 downto 0) <= ap_reg_ppstg_tmp_reg_178_pp0_it1(2 downto 0);
                    ap_reg_ppstg_tmp_reg_178_pp0_it3(2 downto 0) <= ap_reg_ppstg_tmp_reg_178_pp0_it2(2 downto 0);
                    ap_reg_ppstg_tmp_reg_178_pp0_it4(2 downto 0) <= ap_reg_ppstg_tmp_reg_178_pp0_it3(2 downto 0);
                    ap_reg_ppstg_tmp_reg_178_pp0_it5(2 downto 0) <= ap_reg_ppstg_tmp_reg_178_pp0_it4(2 downto 0);
                    ap_reg_ppstg_tmp_reg_178_pp0_it6(2 downto 0) <= ap_reg_ppstg_tmp_reg_178_pp0_it5(2 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond_reg_169 = ap_const_lv1_0))) then
                in1_M_imag_load_reg_209 <= in1_M_imag_q0;
                in1_M_real_load_reg_204 <= in1_M_real_q0;
                in2_M_imag_load_reg_219 <= in2_M_imag_q0;
                in2_M_real_load_reg_214 <= in2_M_real_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_reg_ppstg_exitcond_reg_169_pp0_it5 = ap_const_lv1_0)) then
                p_r_M_imag_reg_229 <= grp_fu_145_p2;
                p_r_M_real_reg_224 <= grp_fu_141_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond_fu_149_p2 = ap_const_lv1_0))) then
                    tmp_reg_178(2 downto 0) <= tmp_fu_161_p1(2 downto 0);
            end if;
        end if;
    end process;
    tmp_reg_178(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_reg_178_pp0_it1(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_reg_178_pp0_it2(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_reg_178_pp0_it3(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_reg_178_pp0_it4(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_reg_178_pp0_it5(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_reg_178_pp0_it6(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond_fu_149_p2, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it6, ap_reg_ppiten_pp0_it7)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_pp0_stg0_fsm_1 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it7) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((exitcond_fu_149_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((exitcond_fu_149_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) then
                    ap_NS_fsm <= ap_ST_st10_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st10_fsm_2;
                end if;
            when ap_ST_st10_fsm_2 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_sig_cseq_ST_st10_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_2)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st10_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= ap_const_lv32_0;

    -- ap_rst_n_inv assign process. --
    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    -- ap_sig_bdd_106 assign process. --
    ap_sig_bdd_106_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_106 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_21 assign process. --
    ap_sig_bdd_21_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_21 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_223 assign process. --
    ap_sig_bdd_223_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_223 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_1 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_1_assign_proc : process(ap_sig_bdd_106)
    begin
        if (ap_sig_bdd_106) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st10_fsm_2 assign process. --
    ap_sig_cseq_ST_st10_fsm_2_assign_proc : process(ap_sig_bdd_223)
    begin
        if (ap_sig_bdd_223) then 
            ap_sig_cseq_ST_st10_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_21)
    begin
        if (ap_sig_bdd_21) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;

    complexDoubleAdder_AXILiteS_s_axi_U_ap_dummy_ce <= ap_const_logic_1;
    exitcond_fu_149_p2 <= "1" when (index_reg_130 = ap_const_lv3_7) else "0";
    grp_fu_141_ce <= ap_const_logic_1;
    grp_fu_145_ce <= ap_const_logic_1;
    in1_M_imag_address0 <= tmp_fu_161_p1(3 - 1 downto 0);

    -- in1_M_imag_ce0 assign process. --
    in1_M_imag_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            in1_M_imag_ce0 <= ap_const_logic_1;
        else 
            in1_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in1_M_real_address0 <= tmp_fu_161_p1(3 - 1 downto 0);

    -- in1_M_real_ce0 assign process. --
    in1_M_real_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            in1_M_real_ce0 <= ap_const_logic_1;
        else 
            in1_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in2_M_imag_address0 <= tmp_fu_161_p1(3 - 1 downto 0);

    -- in2_M_imag_ce0 assign process. --
    in2_M_imag_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            in2_M_imag_ce0 <= ap_const_logic_1;
        else 
            in2_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in2_M_real_address0 <= tmp_fu_161_p1(3 - 1 downto 0);

    -- in2_M_real_ce0 assign process. --
    in2_M_real_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            in2_M_real_ce0 <= ap_const_logic_1;
        else 
            in2_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    index_1_fu_155_p2 <= std_logic_vector(unsigned(index_reg_130) + unsigned(ap_const_lv3_1));
    out_M_imag_address0 <= ap_reg_ppstg_tmp_reg_178_pp0_it6(3 - 1 downto 0);

    -- out_M_imag_ce0 assign process. --
    out_M_imag_ce0_assign_proc : process(ap_reg_ppiten_pp0_it7)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it7)) then 
            out_M_imag_ce0 <= ap_const_logic_1;
        else 
            out_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_M_imag_d0 <= p_r_M_imag_reg_229;

    -- out_M_imag_we0 assign process. --
    out_M_imag_we0_assign_proc : process(ap_reg_ppiten_pp0_it7, ap_reg_ppstg_exitcond_reg_169_pp0_it6)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it7) and (ap_reg_ppstg_exitcond_reg_169_pp0_it6 = ap_const_lv1_0)))) then 
            out_M_imag_we0 <= ap_const_logic_1;
        else 
            out_M_imag_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_M_real_address0 <= ap_reg_ppstg_tmp_reg_178_pp0_it6(3 - 1 downto 0);

    -- out_M_real_ce0 assign process. --
    out_M_real_ce0_assign_proc : process(ap_reg_ppiten_pp0_it7)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it7)) then 
            out_M_real_ce0 <= ap_const_logic_1;
        else 
            out_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_M_real_d0 <= p_r_M_real_reg_224;

    -- out_M_real_we0 assign process. --
    out_M_real_we0_assign_proc : process(ap_reg_ppiten_pp0_it7, ap_reg_ppstg_exitcond_reg_169_pp0_it6)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it7) and (ap_reg_ppstg_exitcond_reg_169_pp0_it6 = ap_const_lv1_0)))) then 
            out_M_real_we0 <= ap_const_logic_1;
        else 
            out_M_real_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_161_p1 <= std_logic_vector(resize(unsigned(index_reg_130),64));
end behav;
