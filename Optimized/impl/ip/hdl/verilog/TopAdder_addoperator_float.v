// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module TopAdder_addoperator_float (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_ce,
        p_x_M_real_address0,
        p_x_M_real_ce0,
        p_x_M_real_q0,
        tmp,
        tmp_3,
        p_x_M_imag_address0,
        p_x_M_imag_ce0,
        p_x_M_imag_q0,
        tmp1,
        tmp_32,
        p_y_M_real_address0,
        p_y_M_real_ce0,
        p_y_M_real_q0,
        tmp3,
        p_y_M_imag_address0,
        p_y_M_imag_ce0,
        p_y_M_imag_q0,
        tmp4,
        ap_return_0,
        ap_return_1
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_pp0_stg0_fsm_0 = 1'b1;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ap_ce;
output  [3:0] p_x_M_real_address0;
output   p_x_M_real_ce0;
input  [31:0] p_x_M_real_q0;
input  [1:0] tmp;
input  [3:0] tmp_3;
output  [3:0] p_x_M_imag_address0;
output   p_x_M_imag_ce0;
input  [31:0] p_x_M_imag_q0;
input  [1:0] tmp1;
input  [3:0] tmp_32;
output  [1:0] p_y_M_real_address0;
output   p_y_M_real_ce0;
input  [31:0] p_y_M_real_q0;
input  [1:0] tmp3;
output  [1:0] p_y_M_imag_address0;
output   p_y_M_imag_ce0;
input  [31:0] p_y_M_imag_q0;
input  [1:0] tmp4;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg p_x_M_real_ce0;
reg p_x_M_imag_ce0;
reg p_y_M_real_ce0;
reg p_y_M_imag_ce0;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm = 1'b1;
reg    ap_sig_cseq_ST_pp0_stg0_fsm_0;
reg    ap_sig_bdd_19;
wire    ap_reg_ppiten_pp0_it0;
reg    ap_reg_ppiten_pp0_it1 = 1'b0;
reg    ap_reg_ppiten_pp0_it2 = 1'b0;
reg    ap_reg_ppiten_pp0_it3 = 1'b0;
reg    ap_reg_ppiten_pp0_it4 = 1'b0;
reg    ap_reg_ppiten_pp0_it5 = 1'b0;
reg    ap_reg_ppiten_pp0_it6 = 1'b0;
reg   [31:0] p_x_M_real_load_reg_262;
reg   [31:0] p_x_M_imag_load_reg_267;
reg   [31:0] p_y_M_real_load_reg_272;
reg   [31:0] p_y_M_imag_load_reg_277;
wire   [63:0] tmp_4_cast_fu_188_p1;
wire   [63:0] tmp_7_cast_fu_225_p1;
wire   [63:0] tmp4_cast_fu_146_p1;
wire   [63:0] tmp3_cast_fu_151_p1;
wire   [3:0] tmp_1_fu_164_p3;
wire   [4:0] tmp1_cast_cast_fu_160_p1;
wire   [4:0] p_shl1_cast_fu_172_p1;
wire   [4:0] tmp_2_fu_176_p2;
wire   [4:0] tmp_32_cast_cast_fu_156_p1;
wire   [4:0] tmp_4_fu_182_p2;
wire   [3:0] tmp_5_fu_201_p3;
wire   [4:0] tmp_cast_cast_fu_197_p1;
wire   [4:0] p_shl_cast_fu_209_p1;
wire   [4:0] tmp_6_fu_213_p2;
wire   [4:0] tmp_3_cast_cast_fu_193_p1;
wire   [4:0] tmp_7_fu_219_p2;
wire   [31:0] grp_fu_138_p2;
wire   [31:0] grp_fu_142_p2;
reg    grp_fu_138_ce;
reg    grp_fu_142_ce;
reg   [0:0] ap_NS_fsm;
reg    ap_sig_pprstidle_pp0;
reg    ap_sig_pprststart_0;


TopAdder_fadd_32ns_32ns_32_5_full_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
TopAdder_fadd_32ns_32ns_32_5_full_dsp_U0(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( p_x_M_real_load_reg_262 ),
    .din1( p_y_M_real_load_reg_272 ),
    .ce( grp_fu_138_ce ),
    .dout( grp_fu_138_p2 )
);

TopAdder_fadd_32ns_32ns_32_5_full_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
TopAdder_fadd_32ns_32ns_32_5_full_dsp_U1(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( p_x_M_imag_load_reg_267 ),
    .din1( p_y_M_imag_load_reg_277 ),
    .ce( grp_fu_142_ce ),
    .dout( grp_fu_142_p2 )
);



always @ (posedge ap_clk) begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_pp0_stg0_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp0_it1
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & ~(((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) | ~(ap_const_logic_1 == ap_ce)))) begin
            ap_reg_ppiten_pp0_it1 <= ap_reg_ppiten_pp0_it0;
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp0_it2
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
    end else begin
        if (~(((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) | ~(ap_const_logic_1 == ap_ce))) begin
            ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp0_it3
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
    end else begin
        if (~(((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) | ~(ap_const_logic_1 == ap_ce))) begin
            ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp0_it4
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it4 <= ap_const_logic_0;
    end else begin
        if (~(((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) | ~(ap_const_logic_1 == ap_ce))) begin
            ap_reg_ppiten_pp0_it4 <= ap_reg_ppiten_pp0_it3;
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp0_it5
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it5 <= ap_const_logic_0;
    end else begin
        if (~(((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) | ~(ap_const_logic_1 == ap_ce))) begin
            ap_reg_ppiten_pp0_it5 <= ap_reg_ppiten_pp0_it4;
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp0_it6
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it6 <= ap_const_logic_0;
    end else begin
        if (~(((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) | ~(ap_const_logic_1 == ap_ce))) begin
            ap_reg_ppiten_pp0_it6 <= ap_reg_ppiten_pp0_it5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) & (ap_const_logic_1 == ap_ce))) begin
        p_x_M_imag_load_reg_267 <= p_x_M_imag_q0;
        p_x_M_real_load_reg_262 <= p_x_M_real_q0;
        p_y_M_imag_load_reg_277 <= p_y_M_imag_q0;
        p_y_M_real_load_reg_272 <= p_y_M_real_q0;
    end
end

always @ (ap_start or ap_sig_cseq_ST_pp0_stg0_fsm_0 or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it6 or ap_ce) begin
    if (((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it6) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) & (ap_const_logic_1 == ap_ce)))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

always @ (ap_start or ap_sig_cseq_ST_pp0_stg0_fsm_0 or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or ap_reg_ppiten_pp0_it2 or ap_reg_ppiten_pp0_it3 or ap_reg_ppiten_pp0_it4 or ap_reg_ppiten_pp0_it5 or ap_reg_ppiten_pp0_it6) begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & (ap_const_logic_0 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_0 == ap_reg_ppiten_pp0_it1) & (ap_const_logic_0 == ap_reg_ppiten_pp0_it2) & (ap_const_logic_0 == ap_reg_ppiten_pp0_it3) & (ap_const_logic_0 == ap_reg_ppiten_pp0_it4) & (ap_const_logic_0 == ap_reg_ppiten_pp0_it5) & (ap_const_logic_0 == ap_reg_ppiten_pp0_it6))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

always @ (ap_start or ap_sig_cseq_ST_pp0_stg0_fsm_0 or ap_reg_ppiten_pp0_it0 or ap_ce) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) & (ap_const_logic_1 == ap_ce))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_19) begin
    if (ap_sig_bdd_19) begin
        ap_sig_cseq_ST_pp0_stg0_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg0_fsm_0 = ap_const_logic_0;
    end
end

always @ (ap_start or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or ap_reg_ppiten_pp0_it2 or ap_reg_ppiten_pp0_it3 or ap_reg_ppiten_pp0_it4 or ap_reg_ppiten_pp0_it5) begin
    if (((ap_const_logic_0 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_0 == ap_reg_ppiten_pp0_it1) & (ap_const_logic_0 == ap_reg_ppiten_pp0_it2) & (ap_const_logic_0 == ap_reg_ppiten_pp0_it3) & (ap_const_logic_0 == ap_reg_ppiten_pp0_it4) & (ap_const_logic_0 == ap_reg_ppiten_pp0_it5) & (ap_const_logic_0 == ap_start))) begin
        ap_sig_pprstidle_pp0 = ap_const_logic_1;
    end else begin
        ap_sig_pprstidle_pp0 = ap_const_logic_0;
    end
end

always @ (ap_start or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or ap_reg_ppiten_pp0_it2 or ap_reg_ppiten_pp0_it3 or ap_reg_ppiten_pp0_it4 or ap_reg_ppiten_pp0_it5) begin
    if (((ap_const_logic_1 == ap_start) & (ap_const_logic_0 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_0 == ap_reg_ppiten_pp0_it1) & (ap_const_logic_0 == ap_reg_ppiten_pp0_it2) & (ap_const_logic_0 == ap_reg_ppiten_pp0_it3) & (ap_const_logic_0 == ap_reg_ppiten_pp0_it4) & (ap_const_logic_0 == ap_reg_ppiten_pp0_it5))) begin
        ap_sig_pprststart_0 = ap_const_logic_1;
    end else begin
        ap_sig_pprststart_0 = ap_const_logic_0;
    end
end

always @ (ap_start or ap_sig_cseq_ST_pp0_stg0_fsm_0 or ap_reg_ppiten_pp0_it0 or ap_ce) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) & (ap_const_logic_1 == ap_ce))) begin
        grp_fu_138_ce = ap_const_logic_1;
    end else begin
        grp_fu_138_ce = ap_const_logic_0;
    end
end

always @ (ap_start or ap_sig_cseq_ST_pp0_stg0_fsm_0 or ap_reg_ppiten_pp0_it0 or ap_ce) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) & (ap_const_logic_1 == ap_ce))) begin
        grp_fu_142_ce = ap_const_logic_1;
    end else begin
        grp_fu_142_ce = ap_const_logic_0;
    end
end

always @ (ap_start or ap_sig_cseq_ST_pp0_stg0_fsm_0 or ap_reg_ppiten_pp0_it0 or ap_ce) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) & (ap_const_logic_1 == ap_ce))) begin
        p_x_M_imag_ce0 = ap_const_logic_1;
    end else begin
        p_x_M_imag_ce0 = ap_const_logic_0;
    end
end

always @ (ap_start or ap_sig_cseq_ST_pp0_stg0_fsm_0 or ap_reg_ppiten_pp0_it0 or ap_ce) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) & (ap_const_logic_1 == ap_ce))) begin
        p_x_M_real_ce0 = ap_const_logic_1;
    end else begin
        p_x_M_real_ce0 = ap_const_logic_0;
    end
end

always @ (ap_start or ap_sig_cseq_ST_pp0_stg0_fsm_0 or ap_reg_ppiten_pp0_it0 or ap_ce) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) & (ap_const_logic_1 == ap_ce))) begin
        p_y_M_imag_ce0 = ap_const_logic_1;
    end else begin
        p_y_M_imag_ce0 = ap_const_logic_0;
    end
end

always @ (ap_start or ap_sig_cseq_ST_pp0_stg0_fsm_0 or ap_reg_ppiten_pp0_it0 or ap_ce) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) & (ap_const_logic_1 == ap_ce))) begin
        p_y_M_real_ce0 = ap_const_logic_1;
    end else begin
        p_y_M_real_ce0 = ap_const_logic_0;
    end
end
always @ (ap_start or ap_CS_fsm or ap_reg_ppiten_pp0_it0 or ap_ce or ap_sig_pprstidle_pp0 or ap_sig_pprststart_0) begin
    case (ap_CS_fsm)
        ap_ST_pp0_stg0_fsm_0 : 
        begin
            ap_NS_fsm = ap_ST_pp0_stg0_fsm_0;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


assign ap_reg_ppiten_pp0_it0 = ap_start;

assign ap_return_0 = grp_fu_138_p2;

assign ap_return_1 = grp_fu_142_p2;


always @ (ap_CS_fsm) begin
    ap_sig_bdd_19 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

assign p_shl1_cast_fu_172_p1 = tmp_1_fu_164_p3;

assign p_shl_cast_fu_209_p1 = tmp_5_fu_201_p3;

assign p_x_M_imag_address0 = tmp_4_cast_fu_188_p1;

assign p_x_M_real_address0 = tmp_7_cast_fu_225_p1;

assign p_y_M_imag_address0 = tmp4_cast_fu_146_p1;

assign p_y_M_real_address0 = tmp3_cast_fu_151_p1;

assign tmp1_cast_cast_fu_160_p1 = tmp1;

assign tmp3_cast_fu_151_p1 = tmp3;

assign tmp4_cast_fu_146_p1 = tmp4;

assign tmp_1_fu_164_p3 = {{tmp1}, {ap_const_lv2_0}};

assign tmp_2_fu_176_p2 = (tmp1_cast_cast_fu_160_p1 + p_shl1_cast_fu_172_p1);

assign tmp_32_cast_cast_fu_156_p1 = tmp_32;

assign tmp_3_cast_cast_fu_193_p1 = tmp_3;

assign tmp_4_cast_fu_188_p1 = tmp_4_fu_182_p2;

assign tmp_4_fu_182_p2 = (tmp_2_fu_176_p2 + tmp_32_cast_cast_fu_156_p1);

assign tmp_5_fu_201_p3 = {{tmp}, {ap_const_lv2_0}};

assign tmp_6_fu_213_p2 = (tmp_cast_cast_fu_197_p1 + p_shl_cast_fu_209_p1);

assign tmp_7_cast_fu_225_p1 = tmp_7_fu_219_p2;

assign tmp_7_fu_219_p2 = (tmp_6_fu_213_p2 + tmp_3_cast_cast_fu_193_p1);

assign tmp_cast_cast_fu_197_p1 = tmp;


endmodule //TopAdder_addoperator_float

