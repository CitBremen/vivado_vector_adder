

================================================================
== Vivado HLS Report for 'TopAdder_addoperator_float'
================================================================
* Date:           Sat May 21 15:26:54 2016

* Version:        2015.4 (Build 1412921 on Wed Nov 18 09:58:55 AM 2015)
* Project:        complexAdder
* Solution:       Optimized
* Product family: zynq
* Target device:  xc7z020clg484-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |  10.00|      7.26|        1.25|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+----------+
    |  Latency  |  Interval | Pipeline |
    | min | max | min | max |   Type   |
    +-----+-----+-----+-----+----------+
    |    6|    6|    1|    1| function |
    +-----+-----+-----+-----+----------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        N/A

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 2
HasVarLatency: 0
IsPipeline: 1
IsRtlPipelined: 1
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 1, depth = 7


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states: 7
* Pipeline: 1
  Pipeline-0: II = 1, D = 7, States = { 1 2 3 4 5 6 7 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	3  / true
3 --> 
	4  / true
4 --> 
	5  / true
5 --> 
	6  / true
6 --> 
	7  / true
7 --> 
* FSM state operations: 

 <State 1>: 6.29ns
ST_1: tmp4_read [1/1] 1.28ns
:4  %tmp4_read = call i2 @_ssdm_op_Read.ap_auto.i2(i2 %tmp4)

ST_1: tmp3_read [1/1] 1.28ns
:5  %tmp3_read = call i2 @_ssdm_op_Read.ap_auto.i2(i2 %tmp3)

ST_1: tmp_32_read [1/1] 1.28ns
:6  %tmp_32_read = call i4 @_ssdm_op_Read.ap_auto.i4(i4 %tmp_32)

ST_1: tmp1_read [1/1] 1.28ns
:7  %tmp1_read = call i2 @_ssdm_op_Read.ap_auto.i2(i2 %tmp1)

ST_1: tmp_3_read [1/1] 1.28ns
:8  %tmp_3_read = call i4 @_ssdm_op_Read.ap_auto.i4(i4 %tmp_3)

ST_1: tmp_read [1/1] 1.28ns
:9  %tmp_read = call i2 @_ssdm_op_Read.ap_auto.i2(i2 %tmp)

ST_1: tmp4_cast [1/1] 0.00ns
:10  %tmp4_cast = zext i2 %tmp4_read to i64

ST_1: tmp3_cast [1/1] 0.00ns
:11  %tmp3_cast = zext i2 %tmp3_read to i64

ST_1: tmp_32_cast_cast [1/1] 0.00ns
:12  %tmp_32_cast_cast = zext i4 %tmp_32_read to i5

ST_1: tmp1_cast_cast [1/1] 0.00ns
:13  %tmp1_cast_cast = zext i2 %tmp1_read to i5

ST_1: tmp_1 [1/1] 0.00ns
:14  %tmp_1 = call i4 @_ssdm_op_BitConcatenate.i4.i2.i2(i2 %tmp1_read, i2 0)

ST_1: p_shl1_cast [1/1] 0.00ns
:15  %p_shl1_cast = zext i4 %tmp_1 to i5

ST_1: tmp_2 [1/1] 1.31ns
:16  %tmp_2 = add i5 %tmp1_cast_cast, %p_shl1_cast

ST_1: tmp_4 [1/1] 1.31ns
:17  %tmp_4 = add i5 %tmp_2, %tmp_32_cast_cast

ST_1: tmp_4_cast [1/1] 0.00ns
:18  %tmp_4_cast = zext i5 %tmp_4 to i64

ST_1: p_x_M_imag_addr [1/1] 0.00ns
:19  %p_x_M_imag_addr = getelementptr [15 x float]* %p_x_M_imag, i64 0, i64 %tmp_4_cast

ST_1: tmp_3_cast_cast [1/1] 0.00ns
:20  %tmp_3_cast_cast = zext i4 %tmp_3_read to i5

ST_1: tmp_cast_cast [1/1] 0.00ns
:21  %tmp_cast_cast = zext i2 %tmp_read to i5

ST_1: tmp_5 [1/1] 0.00ns
:22  %tmp_5 = call i4 @_ssdm_op_BitConcatenate.i4.i2.i2(i2 %tmp_read, i2 0)

ST_1: p_shl_cast [1/1] 0.00ns
:23  %p_shl_cast = zext i4 %tmp_5 to i5

ST_1: tmp_6 [1/1] 1.31ns
:24  %tmp_6 = add i5 %tmp_cast_cast, %p_shl_cast

ST_1: tmp_7 [1/1] 1.31ns
:25  %tmp_7 = add i5 %tmp_6, %tmp_3_cast_cast

ST_1: tmp_7_cast [1/1] 0.00ns
:26  %tmp_7_cast = zext i5 %tmp_7 to i64

ST_1: p_x_M_real_addr [1/1] 0.00ns
:27  %p_x_M_real_addr = getelementptr [15 x float]* %p_x_M_real, i64 0, i64 %tmp_7_cast

ST_1: p_y_M_imag_addr [1/1] 0.00ns
:28  %p_y_M_imag_addr = getelementptr [3 x float]* %p_y_M_imag, i64 0, i64 %tmp4_cast

ST_1: p_y_M_real_addr [1/1] 0.00ns
:29  %p_y_M_real_addr = getelementptr [3 x float]* %p_y_M_real, i64 0, i64 %tmp3_cast

ST_1: p_x_M_real_load [2/2] 2.39ns
:32  %p_x_M_real_load = load float* %p_x_M_real_addr, align 4

ST_1: p_x_M_imag_load [2/2] 2.39ns
:33  %p_x_M_imag_load = load float* %p_x_M_imag_addr, align 4

ST_1: p_y_M_real_load [2/2] 2.39ns
:34  %p_y_M_real_load = load float* %p_y_M_real_addr, align 4

ST_1: p_y_M_imag_load [2/2] 2.39ns
:36  %p_y_M_imag_load = load float* %p_y_M_imag_addr, align 4


 <State 2>: 2.39ns
ST_2: p_x_M_real_load [1/2] 2.39ns
:32  %p_x_M_real_load = load float* %p_x_M_real_addr, align 4

ST_2: p_x_M_imag_load [1/2] 2.39ns
:33  %p_x_M_imag_load = load float* %p_x_M_imag_addr, align 4

ST_2: p_y_M_real_load [1/2] 2.39ns
:34  %p_y_M_real_load = load float* %p_y_M_real_addr, align 4

ST_2: p_y_M_imag_load [1/2] 2.39ns
:36  %p_y_M_imag_load = load float* %p_y_M_imag_addr, align 4


 <State 3>: 7.26ns
ST_3: p_r_M_real [5/5] 7.26ns
:35  %p_r_M_real = fadd float %p_x_M_real_load, %p_y_M_real_load

ST_3: p_r_M_imag [5/5] 7.26ns
:37  %p_r_M_imag = fadd float %p_x_M_imag_load, %p_y_M_imag_load


 <State 4>: 7.26ns
ST_4: p_r_M_real [4/5] 7.26ns
:35  %p_r_M_real = fadd float %p_x_M_real_load, %p_y_M_real_load

ST_4: p_r_M_imag [4/5] 7.26ns
:37  %p_r_M_imag = fadd float %p_x_M_imag_load, %p_y_M_imag_load


 <State 5>: 7.26ns
ST_5: p_r_M_real [3/5] 7.26ns
:35  %p_r_M_real = fadd float %p_x_M_real_load, %p_y_M_real_load

ST_5: p_r_M_imag [3/5] 7.26ns
:37  %p_r_M_imag = fadd float %p_x_M_imag_load, %p_y_M_imag_load


 <State 6>: 7.26ns
ST_6: p_r_M_real [2/5] 7.26ns
:35  %p_r_M_real = fadd float %p_x_M_real_load, %p_y_M_real_load

ST_6: p_r_M_imag [2/5] 7.26ns
:37  %p_r_M_imag = fadd float %p_x_M_imag_load, %p_y_M_imag_load


 <State 7>: 7.26ns
ST_7: empty [1/1] 0.00ns
:0  %empty = call i32 (...)* @_ssdm_op_SpecMemCore([3 x float]* %p_y_M_imag, [1 x i8]* @p_str9, [7 x i8]* @RAM_1P_str, [1 x i8]* @p_str9, i32 -1, [1 x i8]* @p_str9, [1 x i8]* @p_str9, [1 x i8]* @p_str9)

ST_7: empty_2 [1/1] 0.00ns
:1  %empty_2 = call i32 (...)* @_ssdm_op_SpecMemCore([3 x float]* %p_y_M_real, [1 x i8]* @p_str8, [7 x i8]* @RAM_1P_str, [1 x i8]* @p_str8, i32 -1, [1 x i8]* @p_str8, [1 x i8]* @p_str8, [1 x i8]* @p_str8)

ST_7: empty_3 [1/1] 0.00ns
:2  %empty_3 = call i32 (...)* @_ssdm_op_SpecMemCore([15 x float]* %p_x_M_imag, [1 x i8]* @p_str7, [7 x i8]* @RAM_1P_str, [1 x i8]* @p_str7, i32 -1, [1 x i8]* @p_str7, [1 x i8]* @p_str7, [1 x i8]* @p_str7)

ST_7: empty_4 [1/1] 0.00ns
:3  %empty_4 = call i32 (...)* @_ssdm_op_SpecMemCore([15 x float]* %p_x_M_real, [1 x i8]* @p_str6, [7 x i8]* @RAM_1P_str, [1 x i8]* @p_str6, i32 -1, [1 x i8]* @p_str6, [1 x i8]* @p_str6, [1 x i8]* @p_str6)

ST_7: stg_54 [1/1] 0.00ns
:30  call void (...)* @_ssdm_op_SpecInterface([15 x float]* %p_x_M_real, [15 x float]* %p_x_M_imag, [10 x i8]* @p_str, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1)

ST_7: stg_55 [1/1] 0.00ns
:31  call void (...)* @_ssdm_op_SpecInterface([3 x float]* %p_y_M_real, [3 x float]* %p_y_M_imag, [10 x i8]* @p_str, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1)

ST_7: p_r_M_real [1/5] 7.26ns
:35  %p_r_M_real = fadd float %p_x_M_real_load, %p_y_M_real_load

ST_7: p_r_M_imag [1/5] 7.26ns
:37  %p_r_M_imag = fadd float %p_x_M_imag_load, %p_y_M_imag_load

ST_7: mrv [1/1] 0.00ns
:38  %mrv = insertvalue { float, float } undef, float %p_r_M_real, 0

ST_7: mrv_1 [1/1] 0.00ns
:39  %mrv_1 = insertvalue { float, float } %mrv, float %p_r_M_imag, 1

ST_7: stg_60 [1/1] 0.00ns
:40  ret { float, float } %mrv_1



============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
