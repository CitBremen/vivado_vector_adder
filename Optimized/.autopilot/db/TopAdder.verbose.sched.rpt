

================================================================
== Vivado HLS Report for 'TopAdder'
================================================================
* Date:           Sat May 21 15:26:55 2016

* Version:        2015.4 (Build 1412921 on Wed Nov 18 09:58:55 AM 2015)
* Project:        complexAdder
* Solution:       Optimized
* Product family: zynq
* Target device:  xc7z020clg484-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |  10.00|      7.26|        1.25|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+---------+
    |  Latency  |  Interval | Pipeline|
    | min | max | min | max |   Type  |
    +-----+-----+-----+-----+---------+
    |  108|  108|  109|  109|   none  |
    +-----+-----+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +-------------+-----+-----+----------+-----------+-----------+------+----------+
        |             |  Latency  | Iteration|  Initiation Interval  | Trip |          |
        |  Loop Name  | min | max |  Latency |  achieved |   target  | Count| Pipelined|
        +-------------+-----+-----+----------+-----------+-----------+------+----------+
        |- outerloop  |  106|  106|        37|         35|          1|     3|    yes   |
        +-------------+-----+-----+----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 35, depth = 37


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states: 39
* Pipeline: 1
  Pipeline-0: II = 35, D = 37, States = { 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	39  / (exitcond1)
	3  / (!exitcond1)
3 --> 
	4  / true
4 --> 
	5  / true
5 --> 
	6  / true
6 --> 
	7  / true
7 --> 
	8  / true
8 --> 
	9  / true
9 --> 
	10  / true
10 --> 
	11  / true
11 --> 
	12  / true
12 --> 
	13  / true
13 --> 
	14  / true
14 --> 
	15  / true
15 --> 
	16  / true
16 --> 
	17  / true
17 --> 
	18  / true
18 --> 
	19  / true
19 --> 
	20  / true
20 --> 
	21  / true
21 --> 
	22  / true
22 --> 
	23  / true
23 --> 
	24  / true
24 --> 
	25  / true
25 --> 
	26  / true
26 --> 
	27  / true
27 --> 
	28  / true
28 --> 
	29  / true
29 --> 
	30  / true
30 --> 
	31  / true
31 --> 
	32  / true
32 --> 
	33  / true
33 --> 
	34  / true
34 --> 
	35  / true
35 --> 
	36  / true
36 --> 
	37  / true
37 --> 
	38  / true
38 --> 
	2  / true
39 --> 
* FSM state operations: 

 <State 1>: 1.57ns
ST_1: stg_40 [1/1] 0.00ns
:0  call void (...)* @_ssdm_op_SpecBitsMap([3 x float]* %output_M_real), !map !7

ST_1: stg_41 [1/1] 0.00ns
:1  call void (...)* @_ssdm_op_SpecBitsMap([3 x float]* %output_M_imag), !map !13

ST_1: stg_42 [1/1] 0.00ns
:2  call void (...)* @_ssdm_op_SpecBitsMap([15 x float]* %input1_M_real), !map !17

ST_1: stg_43 [1/1] 0.00ns
:3  call void (...)* @_ssdm_op_SpecBitsMap([15 x float]* %input1_M_imag), !map !23

ST_1: stg_44 [1/1] 0.00ns
:4  call void (...)* @_ssdm_op_SpecBitsMap([3 x float]* %input2_M_real), !map !27

ST_1: stg_45 [1/1] 0.00ns
:5  call void (...)* @_ssdm_op_SpecBitsMap([3 x float]* %input2_M_imag), !map !31

ST_1: stg_46 [1/1] 0.00ns
:6  call void (...)* @_ssdm_op_SpecBitsMap(i32 0) nounwind, !map !35

ST_1: stg_47 [1/1] 0.00ns
:7  call void (...)* @_ssdm_op_SpecTopModule([9 x i8]* @TopAdder_str) nounwind

ST_1: stg_48 [1/1] 0.00ns
:8  call void (...)* @_ssdm_op_SpecInterface([3 x float]* %output_M_real, [3 x float]* %output_M_imag, [10 x i8]* @p_str, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind

ST_1: stg_49 [1/1] 0.00ns
:9  call void (...)* @_ssdm_op_SpecInterface([3 x float]* %input2_M_real, [3 x float]* %input2_M_imag, [10 x i8]* @p_str, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind

ST_1: empty [1/1] 0.00ns
:10  %empty = call i32 (...)* @_ssdm_op_SpecMemCore([15 x float]* %input1_M_real, [1 x i8]* @p_str6, [7 x i8]* @RAM_1P_str, [1 x i8]* @p_str6, i32 -1, [1 x i8]* @p_str6, [1 x i8]* @p_str6, [1 x i8]* @p_str6)

ST_1: empty_8 [1/1] 0.00ns
:11  %empty_8 = call i32 (...)* @_ssdm_op_SpecMemCore([15 x float]* %input1_M_imag, [1 x i8]* @p_str7, [7 x i8]* @RAM_1P_str, [1 x i8]* @p_str7, i32 -1, [1 x i8]* @p_str7, [1 x i8]* @p_str7, [1 x i8]* @p_str7)

ST_1: stg_52 [1/1] 0.00ns
:12  call void (...)* @_ssdm_op_SpecInterface([15 x float]* %input1_M_real, [15 x float]* %input1_M_imag, [10 x i8]* @p_str, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1)

ST_1: stg_53 [1/1] 0.00ns
:13  call void (...)* @_ssdm_op_SpecInterface(i32 0, [10 x i8]* @p_str2, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind

ST_1: empty_9 [1/1] 0.00ns
:14  %empty_9 = call i32 (...)* @_ssdm_op_SpecMemCore([3 x float]* %output_M_real, [1 x i8]* @p_str4, [7 x i8]* @RAM_1P_str, [1 x i8]* @p_str4, i32 -1, [1 x i8]* @p_str4, [1 x i8]* @p_str4, [1 x i8]* @p_str4)

ST_1: empty_10 [1/1] 0.00ns
:15  %empty_10 = call i32 (...)* @_ssdm_op_SpecMemCore([3 x float]* %output_M_imag, [1 x i8]* @p_str5, [7 x i8]* @RAM_1P_str, [1 x i8]* @p_str5, i32 -1, [1 x i8]* @p_str5, [1 x i8]* @p_str5, [1 x i8]* @p_str5)

ST_1: stg_56 [1/1] 0.00ns
:16  call void (...)* @_ssdm_op_SpecInterface([3 x float]* %output_M_real, [3 x float]* %output_M_imag, [10 x i8]* @p_str2, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind

ST_1: stg_57 [1/1] 0.00ns
:17  call void (...)* @_ssdm_op_SpecInterface([15 x float]* %input1_M_real, [15 x float]* %input1_M_imag, [10 x i8]* @p_str2, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1)

ST_1: empty_11 [1/1] 0.00ns
:18  %empty_11 = call i32 (...)* @_ssdm_op_SpecMemCore([3 x float]* %input2_M_real, [1 x i8]* @p_str8, [7 x i8]* @RAM_1P_str, [1 x i8]* @p_str8, i32 -1, [1 x i8]* @p_str8, [1 x i8]* @p_str8, [1 x i8]* @p_str8)

ST_1: empty_12 [1/1] 0.00ns
:19  %empty_12 = call i32 (...)* @_ssdm_op_SpecMemCore([3 x float]* %input2_M_imag, [1 x i8]* @p_str9, [7 x i8]* @RAM_1P_str, [1 x i8]* @p_str9, i32 -1, [1 x i8]* @p_str9, [1 x i8]* @p_str9, [1 x i8]* @p_str9)

ST_1: stg_60 [1/1] 0.00ns
:20  call void (...)* @_ssdm_op_SpecInterface([3 x float]* %input2_M_real, [3 x float]* %input2_M_imag, [10 x i8]* @p_str2, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind

ST_1: stg_61 [1/1] 1.57ns
:21  br label %1


 <State 2>: 1.36ns
ST_2: index [1/1] 0.00ns
:0  %index = phi i2 [ 0, %0 ], [ %index_1, %2 ]

ST_2: exitcond1 [1/1] 1.36ns
:1  %exitcond1 = icmp eq i2 %index, -1

ST_2: index_1 [1/1] 0.80ns
:2  %index_1 = add i2 %index, 1

ST_2: stg_65 [1/1] 0.00ns
:3  br i1 %exitcond1, label %3, label %2


 <State 3>: 3.90ns
ST_3: tmp_s [7/7] 3.90ns
:7  %tmp_s = call fastcc { float, float } @"TopAdder_operator+<float>"([15 x float]* %input1_M_real, i2 %index, i4 0, [15 x float]* %input1_M_imag, i2 %index, i4 0, [3 x float]* %input2_M_real, i2 %index, [3 x float]* %input2_M_imag, i2 %index)


 <State 4>: 7.26ns
ST_4: tmp_s [6/7] 7.26ns
:7  %tmp_s = call fastcc { float, float } @"TopAdder_operator+<float>"([15 x float]* %input1_M_real, i2 %index, i4 0, [15 x float]* %input1_M_imag, i2 %index, i4 0, [3 x float]* %input2_M_real, i2 %index, [3 x float]* %input2_M_imag, i2 %index)


 <State 5>: 7.26ns
ST_5: tmp_s [5/7] 7.26ns
:7  %tmp_s = call fastcc { float, float } @"TopAdder_operator+<float>"([15 x float]* %input1_M_real, i2 %index, i4 0, [15 x float]* %input1_M_imag, i2 %index, i4 0, [3 x float]* %input2_M_real, i2 %index, [3 x float]* %input2_M_imag, i2 %index)


 <State 6>: 7.26ns
ST_6: tmp_s [4/7] 7.26ns
:7  %tmp_s = call fastcc { float, float } @"TopAdder_operator+<float>"([15 x float]* %input1_M_real, i2 %index, i4 0, [15 x float]* %input1_M_imag, i2 %index, i4 0, [3 x float]* %input2_M_real, i2 %index, [3 x float]* %input2_M_imag, i2 %index)


 <State 7>: 7.26ns
ST_7: tmp_s [3/7] 7.26ns
:7  %tmp_s = call fastcc { float, float } @"TopAdder_operator+<float>"([15 x float]* %input1_M_real, i2 %index, i4 0, [15 x float]* %input1_M_imag, i2 %index, i4 0, [3 x float]* %input2_M_real, i2 %index, [3 x float]* %input2_M_imag, i2 %index)


 <State 8>: 7.26ns
ST_8: tmp_s [2/7] 7.26ns
:7  %tmp_s = call fastcc { float, float } @"TopAdder_operator+<float>"([15 x float]* %input1_M_real, i2 %index, i4 0, [15 x float]* %input1_M_imag, i2 %index, i4 0, [3 x float]* %input2_M_real, i2 %index, [3 x float]* %input2_M_imag, i2 %index)


 <State 9>: 7.26ns
ST_9: tmp_s [1/7] 7.26ns
:7  %tmp_s = call fastcc { float, float } @"TopAdder_operator+<float>"([15 x float]* %input1_M_real, i2 %index, i4 0, [15 x float]* %input1_M_imag, i2 %index, i4 0, [3 x float]* %input2_M_real, i2 %index, [3 x float]* %input2_M_imag, i2 %index)

ST_9: p_0 [1/1] 0.00ns
:8  %p_0 = extractvalue { float, float } %tmp_s, 0

ST_9: p_1 [1/1] 0.00ns
:9  %p_1 = extractvalue { float, float } %tmp_s, 1


 <State 10>: 3.90ns
ST_10: tmp [1/1] 0.00ns
:4  %tmp = zext i2 %index to i64

ST_10: output_M_real_addr [1/1] 0.00ns
:5  %output_M_real_addr = getelementptr [3 x float]* %output_M_real, i64 0, i64 %tmp

ST_10: output_M_imag_addr [1/1] 0.00ns
:6  %output_M_imag_addr = getelementptr [3 x float]* %output_M_imag, i64 0, i64 %tmp

ST_10: stg_78 [1/1] 2.39ns
:10  store float %p_0, float* %output_M_real_addr, align 4

ST_10: stg_79 [1/1] 2.39ns
:11  store float %p_1, float* %output_M_imag_addr, align 4

ST_10: tmp_2 [7/7] 3.90ns
:12  %tmp_2 = call fastcc { float, float } @"TopAdder_operator+<float>"([15 x float]* %input1_M_real, i2 %index, i4 1, [15 x float]* %input1_M_imag, i2 %index, i4 1, [3 x float]* %input2_M_real, i2 %index, [3 x float]* %input2_M_imag, i2 %index)


 <State 11>: 7.26ns
ST_11: tmp_2 [6/7] 7.26ns
:12  %tmp_2 = call fastcc { float, float } @"TopAdder_operator+<float>"([15 x float]* %input1_M_real, i2 %index, i4 1, [15 x float]* %input1_M_imag, i2 %index, i4 1, [3 x float]* %input2_M_real, i2 %index, [3 x float]* %input2_M_imag, i2 %index)


 <State 12>: 7.26ns
ST_12: tmp_2 [5/7] 7.26ns
:12  %tmp_2 = call fastcc { float, float } @"TopAdder_operator+<float>"([15 x float]* %input1_M_real, i2 %index, i4 1, [15 x float]* %input1_M_imag, i2 %index, i4 1, [3 x float]* %input2_M_real, i2 %index, [3 x float]* %input2_M_imag, i2 %index)


 <State 13>: 7.26ns
ST_13: tmp_2 [4/7] 7.26ns
:12  %tmp_2 = call fastcc { float, float } @"TopAdder_operator+<float>"([15 x float]* %input1_M_real, i2 %index, i4 1, [15 x float]* %input1_M_imag, i2 %index, i4 1, [3 x float]* %input2_M_real, i2 %index, [3 x float]* %input2_M_imag, i2 %index)


 <State 14>: 7.26ns
ST_14: tmp_2 [3/7] 7.26ns
:12  %tmp_2 = call fastcc { float, float } @"TopAdder_operator+<float>"([15 x float]* %input1_M_real, i2 %index, i4 1, [15 x float]* %input1_M_imag, i2 %index, i4 1, [3 x float]* %input2_M_real, i2 %index, [3 x float]* %input2_M_imag, i2 %index)


 <State 15>: 7.26ns
ST_15: tmp_2 [2/7] 7.26ns
:12  %tmp_2 = call fastcc { float, float } @"TopAdder_operator+<float>"([15 x float]* %input1_M_real, i2 %index, i4 1, [15 x float]* %input1_M_imag, i2 %index, i4 1, [3 x float]* %input2_M_real, i2 %index, [3 x float]* %input2_M_imag, i2 %index)


 <State 16>: 7.26ns
ST_16: tmp_2 [1/7] 7.26ns
:12  %tmp_2 = call fastcc { float, float } @"TopAdder_operator+<float>"([15 x float]* %input1_M_real, i2 %index, i4 1, [15 x float]* %input1_M_imag, i2 %index, i4 1, [3 x float]* %input2_M_real, i2 %index, [3 x float]* %input2_M_imag, i2 %index)

ST_16: p_0_0_1 [1/1] 0.00ns
:13  %p_0_0_1 = extractvalue { float, float } %tmp_2, 0

ST_16: p_1_0_1 [1/1] 0.00ns
:14  %p_1_0_1 = extractvalue { float, float } %tmp_2, 1


 <State 17>: 3.90ns
ST_17: stg_89 [1/1] 2.39ns
:15  store float %p_0_0_1, float* %output_M_real_addr, align 4

ST_17: stg_90 [1/1] 2.39ns
:16  store float %p_1_0_1, float* %output_M_imag_addr, align 4

ST_17: tmp_3 [7/7] 3.90ns
:17  %tmp_3 = call fastcc { float, float } @"TopAdder_operator+<float>"([15 x float]* %input1_M_real, i2 %index, i4 2, [15 x float]* %input1_M_imag, i2 %index, i4 2, [3 x float]* %input2_M_real, i2 %index, [3 x float]* %input2_M_imag, i2 %index)


 <State 18>: 7.26ns
ST_18: tmp_3 [6/7] 7.26ns
:17  %tmp_3 = call fastcc { float, float } @"TopAdder_operator+<float>"([15 x float]* %input1_M_real, i2 %index, i4 2, [15 x float]* %input1_M_imag, i2 %index, i4 2, [3 x float]* %input2_M_real, i2 %index, [3 x float]* %input2_M_imag, i2 %index)


 <State 19>: 7.26ns
ST_19: tmp_3 [5/7] 7.26ns
:17  %tmp_3 = call fastcc { float, float } @"TopAdder_operator+<float>"([15 x float]* %input1_M_real, i2 %index, i4 2, [15 x float]* %input1_M_imag, i2 %index, i4 2, [3 x float]* %input2_M_real, i2 %index, [3 x float]* %input2_M_imag, i2 %index)


 <State 20>: 7.26ns
ST_20: tmp_3 [4/7] 7.26ns
:17  %tmp_3 = call fastcc { float, float } @"TopAdder_operator+<float>"([15 x float]* %input1_M_real, i2 %index, i4 2, [15 x float]* %input1_M_imag, i2 %index, i4 2, [3 x float]* %input2_M_real, i2 %index, [3 x float]* %input2_M_imag, i2 %index)


 <State 21>: 7.26ns
ST_21: tmp_3 [3/7] 7.26ns
:17  %tmp_3 = call fastcc { float, float } @"TopAdder_operator+<float>"([15 x float]* %input1_M_real, i2 %index, i4 2, [15 x float]* %input1_M_imag, i2 %index, i4 2, [3 x float]* %input2_M_real, i2 %index, [3 x float]* %input2_M_imag, i2 %index)


 <State 22>: 7.26ns
ST_22: tmp_3 [2/7] 7.26ns
:17  %tmp_3 = call fastcc { float, float } @"TopAdder_operator+<float>"([15 x float]* %input1_M_real, i2 %index, i4 2, [15 x float]* %input1_M_imag, i2 %index, i4 2, [3 x float]* %input2_M_real, i2 %index, [3 x float]* %input2_M_imag, i2 %index)


 <State 23>: 7.26ns
ST_23: tmp_3 [1/7] 7.26ns
:17  %tmp_3 = call fastcc { float, float } @"TopAdder_operator+<float>"([15 x float]* %input1_M_real, i2 %index, i4 2, [15 x float]* %input1_M_imag, i2 %index, i4 2, [3 x float]* %input2_M_real, i2 %index, [3 x float]* %input2_M_imag, i2 %index)

ST_23: p_0_0_2 [1/1] 0.00ns
:18  %p_0_0_2 = extractvalue { float, float } %tmp_3, 0

ST_23: p_1_0_2 [1/1] 0.00ns
:19  %p_1_0_2 = extractvalue { float, float } %tmp_3, 1


 <State 24>: 3.90ns
ST_24: stg_100 [1/1] 2.39ns
:20  store float %p_0_0_2, float* %output_M_real_addr, align 4

ST_24: stg_101 [1/1] 2.39ns
:21  store float %p_1_0_2, float* %output_M_imag_addr, align 4

ST_24: tmp_5 [7/7] 3.90ns
:22  %tmp_5 = call fastcc { float, float } @"TopAdder_operator+<float>"([15 x float]* %input1_M_real, i2 %index, i4 3, [15 x float]* %input1_M_imag, i2 %index, i4 3, [3 x float]* %input2_M_real, i2 %index, [3 x float]* %input2_M_imag, i2 %index)


 <State 25>: 7.26ns
ST_25: tmp_5 [6/7] 7.26ns
:22  %tmp_5 = call fastcc { float, float } @"TopAdder_operator+<float>"([15 x float]* %input1_M_real, i2 %index, i4 3, [15 x float]* %input1_M_imag, i2 %index, i4 3, [3 x float]* %input2_M_real, i2 %index, [3 x float]* %input2_M_imag, i2 %index)


 <State 26>: 7.26ns
ST_26: tmp_5 [5/7] 7.26ns
:22  %tmp_5 = call fastcc { float, float } @"TopAdder_operator+<float>"([15 x float]* %input1_M_real, i2 %index, i4 3, [15 x float]* %input1_M_imag, i2 %index, i4 3, [3 x float]* %input2_M_real, i2 %index, [3 x float]* %input2_M_imag, i2 %index)


 <State 27>: 7.26ns
ST_27: tmp_5 [4/7] 7.26ns
:22  %tmp_5 = call fastcc { float, float } @"TopAdder_operator+<float>"([15 x float]* %input1_M_real, i2 %index, i4 3, [15 x float]* %input1_M_imag, i2 %index, i4 3, [3 x float]* %input2_M_real, i2 %index, [3 x float]* %input2_M_imag, i2 %index)


 <State 28>: 7.26ns
ST_28: tmp_5 [3/7] 7.26ns
:22  %tmp_5 = call fastcc { float, float } @"TopAdder_operator+<float>"([15 x float]* %input1_M_real, i2 %index, i4 3, [15 x float]* %input1_M_imag, i2 %index, i4 3, [3 x float]* %input2_M_real, i2 %index, [3 x float]* %input2_M_imag, i2 %index)


 <State 29>: 7.26ns
ST_29: tmp_5 [2/7] 7.26ns
:22  %tmp_5 = call fastcc { float, float } @"TopAdder_operator+<float>"([15 x float]* %input1_M_real, i2 %index, i4 3, [15 x float]* %input1_M_imag, i2 %index, i4 3, [3 x float]* %input2_M_real, i2 %index, [3 x float]* %input2_M_imag, i2 %index)


 <State 30>: 7.26ns
ST_30: tmp_5 [1/7] 7.26ns
:22  %tmp_5 = call fastcc { float, float } @"TopAdder_operator+<float>"([15 x float]* %input1_M_real, i2 %index, i4 3, [15 x float]* %input1_M_imag, i2 %index, i4 3, [3 x float]* %input2_M_real, i2 %index, [3 x float]* %input2_M_imag, i2 %index)

ST_30: p_0_0_3 [1/1] 0.00ns
:23  %p_0_0_3 = extractvalue { float, float } %tmp_5, 0

ST_30: p_1_0_3 [1/1] 0.00ns
:24  %p_1_0_3 = extractvalue { float, float } %tmp_5, 1


 <State 31>: 3.90ns
ST_31: stg_111 [1/1] 2.39ns
:25  store float %p_0_0_3, float* %output_M_real_addr, align 4

ST_31: stg_112 [1/1] 2.39ns
:26  store float %p_1_0_3, float* %output_M_imag_addr, align 4

ST_31: tmp_4 [7/7] 3.90ns
:27  %tmp_4 = call fastcc { float, float } @"TopAdder_operator+<float>"([15 x float]* %input1_M_real, i2 %index, i4 4, [15 x float]* %input1_M_imag, i2 %index, i4 4, [3 x float]* %input2_M_real, i2 %index, [3 x float]* %input2_M_imag, i2 %index)


 <State 32>: 7.26ns
ST_32: tmp_4 [6/7] 7.26ns
:27  %tmp_4 = call fastcc { float, float } @"TopAdder_operator+<float>"([15 x float]* %input1_M_real, i2 %index, i4 4, [15 x float]* %input1_M_imag, i2 %index, i4 4, [3 x float]* %input2_M_real, i2 %index, [3 x float]* %input2_M_imag, i2 %index)


 <State 33>: 7.26ns
ST_33: tmp_4 [5/7] 7.26ns
:27  %tmp_4 = call fastcc { float, float } @"TopAdder_operator+<float>"([15 x float]* %input1_M_real, i2 %index, i4 4, [15 x float]* %input1_M_imag, i2 %index, i4 4, [3 x float]* %input2_M_real, i2 %index, [3 x float]* %input2_M_imag, i2 %index)


 <State 34>: 7.26ns
ST_34: tmp_4 [4/7] 7.26ns
:27  %tmp_4 = call fastcc { float, float } @"TopAdder_operator+<float>"([15 x float]* %input1_M_real, i2 %index, i4 4, [15 x float]* %input1_M_imag, i2 %index, i4 4, [3 x float]* %input2_M_real, i2 %index, [3 x float]* %input2_M_imag, i2 %index)


 <State 35>: 7.26ns
ST_35: tmp_4 [3/7] 7.26ns
:27  %tmp_4 = call fastcc { float, float } @"TopAdder_operator+<float>"([15 x float]* %input1_M_real, i2 %index, i4 4, [15 x float]* %input1_M_imag, i2 %index, i4 4, [3 x float]* %input2_M_real, i2 %index, [3 x float]* %input2_M_imag, i2 %index)


 <State 36>: 7.26ns
ST_36: tmp_4 [2/7] 7.26ns
:27  %tmp_4 = call fastcc { float, float } @"TopAdder_operator+<float>"([15 x float]* %input1_M_real, i2 %index, i4 4, [15 x float]* %input1_M_imag, i2 %index, i4 4, [3 x float]* %input2_M_real, i2 %index, [3 x float]* %input2_M_imag, i2 %index)


 <State 37>: 7.26ns
ST_37: tmp_4 [1/7] 7.26ns
:27  %tmp_4 = call fastcc { float, float } @"TopAdder_operator+<float>"([15 x float]* %input1_M_real, i2 %index, i4 4, [15 x float]* %input1_M_imag, i2 %index, i4 4, [3 x float]* %input2_M_real, i2 %index, [3 x float]* %input2_M_imag, i2 %index)

ST_37: p_0_0_4 [1/1] 0.00ns
:28  %p_0_0_4 = extractvalue { float, float } %tmp_4, 0

ST_37: p_1_0_4 [1/1] 0.00ns
:29  %p_1_0_4 = extractvalue { float, float } %tmp_4, 1


 <State 38>: 2.39ns
ST_38: empty_13 [1/1] 0.00ns
:0  %empty_13 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 3, i64 3, i64 3)

ST_38: stg_123 [1/1] 0.00ns
:1  call void (...)* @_ssdm_op_SpecLoopName([10 x i8]* @p_str3) nounwind

ST_38: tmp_1 [1/1] 0.00ns
:2  %tmp_1 = call i32 (...)* @_ssdm_op_SpecRegionBegin([10 x i8]* @p_str3)

ST_38: stg_125 [1/1] 0.00ns
:3  call void (...)* @_ssdm_op_SpecPipeline(i32 1, i32 1, i32 1, i32 0, [1 x i8]* @p_str1) nounwind

ST_38: stg_126 [1/1] 2.39ns
:30  store float %p_0_0_4, float* %output_M_real_addr, align 4

ST_38: stg_127 [1/1] 2.39ns
:31  store float %p_1_0_4, float* %output_M_imag_addr, align 4

ST_38: empty_14 [1/1] 0.00ns
:32  %empty_14 = call i32 (...)* @_ssdm_op_SpecRegionEnd([10 x i8]* @p_str3, i32 %tmp_1)

ST_38: stg_129 [1/1] 0.00ns
:33  br label %1


 <State 39>: 0.00ns
ST_39: stg_130 [1/1] 0.00ns
:0  ret i32 0



============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14
	State 15
	State 16
	State 17
	State 18
	State 19
	State 20
	State 21
	State 22
	State 23
	State 24
	State 25
	State 26
	State 27
	State 28
	State 29
	State 30
	State 31
	State 32
	State 33
	State 34
	State 35
	State 36
	State 37
	State 38
	State 39


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
