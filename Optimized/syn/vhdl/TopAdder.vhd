-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity TopAdder is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 8;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of TopAdder is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "TopAdder,hls_ip_2015_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=108,HLS_SYN_TPT=none,HLS_SYN_MEM=12,HLS_SYN_DSP=4,HLS_SYN_FF=1207,HLS_SYN_LUT=1404}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000001";
    constant ap_ST_pp0_stg0_fsm_1 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000010";
    constant ap_ST_pp0_stg1_fsm_2 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000100";
    constant ap_ST_pp0_stg2_fsm_3 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000001000";
    constant ap_ST_pp0_stg3_fsm_4 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000010000";
    constant ap_ST_pp0_stg4_fsm_5 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000100000";
    constant ap_ST_pp0_stg5_fsm_6 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000001000000";
    constant ap_ST_pp0_stg6_fsm_7 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000010000000";
    constant ap_ST_pp0_stg7_fsm_8 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000100000000";
    constant ap_ST_pp0_stg8_fsm_9 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000001000000000";
    constant ap_ST_pp0_stg9_fsm_10 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000010000000000";
    constant ap_ST_pp0_stg10_fsm_11 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000100000000000";
    constant ap_ST_pp0_stg11_fsm_12 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000001000000000000";
    constant ap_ST_pp0_stg12_fsm_13 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000010000000000000";
    constant ap_ST_pp0_stg13_fsm_14 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000100000000000000";
    constant ap_ST_pp0_stg14_fsm_15 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000001000000000000000";
    constant ap_ST_pp0_stg15_fsm_16 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000010000000000000000";
    constant ap_ST_pp0_stg16_fsm_17 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000100000000000000000";
    constant ap_ST_pp0_stg17_fsm_18 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000001000000000000000000";
    constant ap_ST_pp0_stg18_fsm_19 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000010000000000000000000";
    constant ap_ST_pp0_stg19_fsm_20 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000100000000000000000000";
    constant ap_ST_pp0_stg20_fsm_21 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000001000000000000000000000";
    constant ap_ST_pp0_stg21_fsm_22 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000010000000000000000000000";
    constant ap_ST_pp0_stg22_fsm_23 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000100000000000000000000000";
    constant ap_ST_pp0_stg23_fsm_24 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000001000000000000000000000000";
    constant ap_ST_pp0_stg24_fsm_25 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000010000000000000000000000000";
    constant ap_ST_pp0_stg25_fsm_26 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000100000000000000000000000000";
    constant ap_ST_pp0_stg26_fsm_27 : STD_LOGIC_VECTOR (36 downto 0) := "0000000001000000000000000000000000000";
    constant ap_ST_pp0_stg27_fsm_28 : STD_LOGIC_VECTOR (36 downto 0) := "0000000010000000000000000000000000000";
    constant ap_ST_pp0_stg28_fsm_29 : STD_LOGIC_VECTOR (36 downto 0) := "0000000100000000000000000000000000000";
    constant ap_ST_pp0_stg29_fsm_30 : STD_LOGIC_VECTOR (36 downto 0) := "0000001000000000000000000000000000000";
    constant ap_ST_pp0_stg30_fsm_31 : STD_LOGIC_VECTOR (36 downto 0) := "0000010000000000000000000000000000000";
    constant ap_ST_pp0_stg31_fsm_32 : STD_LOGIC_VECTOR (36 downto 0) := "0000100000000000000000000000000000000";
    constant ap_ST_pp0_stg32_fsm_33 : STD_LOGIC_VECTOR (36 downto 0) := "0001000000000000000000000000000000000";
    constant ap_ST_pp0_stg33_fsm_34 : STD_LOGIC_VECTOR (36 downto 0) := "0010000000000000000000000000000000000";
    constant ap_ST_pp0_stg34_fsm_35 : STD_LOGIC_VECTOR (36 downto 0) := "0100000000000000000000000000000000000";
    constant ap_ST_st39_fsm_36 : STD_LOGIC_VECTOR (36 downto 0) := "1000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_55 : BOOLEAN;
    signal ap_ready : STD_LOGIC;
    signal output_M_real_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal output_M_real_ce0 : STD_LOGIC;
    signal output_M_real_we0 : STD_LOGIC;
    signal output_M_real_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_M_imag_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal output_M_imag_ce0 : STD_LOGIC;
    signal output_M_imag_we0 : STD_LOGIC;
    signal output_M_imag_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input1_M_real_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal input1_M_real_ce0 : STD_LOGIC;
    signal input1_M_real_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input1_M_imag_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal input1_M_imag_ce0 : STD_LOGIC;
    signal input1_M_imag_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input2_M_real_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal input2_M_real_ce0 : STD_LOGIC;
    signal input2_M_real_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input2_M_imag_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal input2_M_imag_ce0 : STD_LOGIC;
    signal input2_M_imag_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal TopAdder_AXILiteS_s_axi_U_ap_dummy_ce : STD_LOGIC;
    signal index_reg_106 : STD_LOGIC_VECTOR (1 downto 0);
    signal reg_158 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_pp0_stg7_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_140 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal exitcond1_reg_186 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg14_fsm_15 : STD_LOGIC;
    signal ap_sig_bdd_154 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg21_fsm_22 : STD_LOGIC;
    signal ap_sig_bdd_164 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg28_fsm_29 : STD_LOGIC;
    signal ap_sig_bdd_174 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg0_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_184 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal reg_163 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond1_fu_168_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_186_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal index_1_fu_174_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal index_1_reg_190 : STD_LOGIC_VECTOR (1 downto 0);
    signal output_M_real_addr_reg_195 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_cseq_ST_pp0_stg8_fsm_9 : STD_LOGIC;
    signal ap_sig_bdd_206 : BOOLEAN;
    signal output_M_imag_addr_reg_200 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_cseq_ST_pp0_stg34_fsm_35 : STD_LOGIC;
    signal ap_sig_bdd_222 : BOOLEAN;
    signal grp_TopAdder_addoperator_float_fu_118_ap_start : STD_LOGIC;
    signal grp_TopAdder_addoperator_float_fu_118_ap_done : STD_LOGIC;
    signal grp_TopAdder_addoperator_float_fu_118_ap_idle : STD_LOGIC;
    signal grp_TopAdder_addoperator_float_fu_118_ap_ready : STD_LOGIC;
    signal grp_TopAdder_addoperator_float_fu_118_ap_ce : STD_LOGIC;
    signal grp_TopAdder_addoperator_float_fu_118_p_x_M_real_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_TopAdder_addoperator_float_fu_118_p_x_M_real_ce0 : STD_LOGIC;
    signal grp_TopAdder_addoperator_float_fu_118_p_x_M_real_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_TopAdder_addoperator_float_fu_118_tmp : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_TopAdder_addoperator_float_fu_118_tmp_3 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_TopAdder_addoperator_float_fu_118_p_x_M_imag_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_TopAdder_addoperator_float_fu_118_p_x_M_imag_ce0 : STD_LOGIC;
    signal grp_TopAdder_addoperator_float_fu_118_p_x_M_imag_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_TopAdder_addoperator_float_fu_118_tmp1 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_TopAdder_addoperator_float_fu_118_tmp_32 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_TopAdder_addoperator_float_fu_118_p_y_M_real_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_TopAdder_addoperator_float_fu_118_p_y_M_real_ce0 : STD_LOGIC;
    signal grp_TopAdder_addoperator_float_fu_118_p_y_M_real_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_TopAdder_addoperator_float_fu_118_tmp3 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_TopAdder_addoperator_float_fu_118_p_y_M_imag_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_TopAdder_addoperator_float_fu_118_p_y_M_imag_ce0 : STD_LOGIC;
    signal grp_TopAdder_addoperator_float_fu_118_p_y_M_imag_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_TopAdder_addoperator_float_fu_118_tmp4 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_TopAdder_addoperator_float_fu_118_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_TopAdder_addoperator_float_fu_118_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal index_phi_fu_110_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_TopAdder_addoperator_float_fu_118_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_pp0_stg1_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_269 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg2_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_278 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg3_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_288 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg4_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_298 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg5_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_308 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg6_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_318 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg9_fsm_10 : STD_LOGIC;
    signal ap_sig_bdd_332 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg10_fsm_11 : STD_LOGIC;
    signal ap_sig_bdd_342 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg11_fsm_12 : STD_LOGIC;
    signal ap_sig_bdd_352 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg12_fsm_13 : STD_LOGIC;
    signal ap_sig_bdd_362 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg13_fsm_14 : STD_LOGIC;
    signal ap_sig_bdd_372 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg15_fsm_16 : STD_LOGIC;
    signal ap_sig_bdd_383 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg16_fsm_17 : STD_LOGIC;
    signal ap_sig_bdd_393 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg17_fsm_18 : STD_LOGIC;
    signal ap_sig_bdd_403 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg18_fsm_19 : STD_LOGIC;
    signal ap_sig_bdd_413 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg19_fsm_20 : STD_LOGIC;
    signal ap_sig_bdd_423 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg20_fsm_21 : STD_LOGIC;
    signal ap_sig_bdd_433 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg22_fsm_23 : STD_LOGIC;
    signal ap_sig_bdd_444 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg23_fsm_24 : STD_LOGIC;
    signal ap_sig_bdd_454 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg24_fsm_25 : STD_LOGIC;
    signal ap_sig_bdd_464 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg25_fsm_26 : STD_LOGIC;
    signal ap_sig_bdd_474 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg26_fsm_27 : STD_LOGIC;
    signal ap_sig_bdd_484 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg27_fsm_28 : STD_LOGIC;
    signal ap_sig_bdd_494 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg29_fsm_30 : STD_LOGIC;
    signal ap_sig_bdd_505 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg30_fsm_31 : STD_LOGIC;
    signal ap_sig_bdd_515 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg31_fsm_32 : STD_LOGIC;
    signal ap_sig_bdd_525 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg32_fsm_33 : STD_LOGIC;
    signal ap_sig_bdd_535 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg33_fsm_34 : STD_LOGIC;
    signal ap_sig_bdd_545 : BOOLEAN;
    signal tmp_fu_180_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st39_fsm_36 : STD_LOGIC;
    signal ap_sig_bdd_604 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (36 downto 0);
    signal ap_sig_bdd_661 : BOOLEAN;

    component TopAdder_addoperator_float IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        p_x_M_real_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        p_x_M_real_ce0 : OUT STD_LOGIC;
        p_x_M_real_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        tmp : IN STD_LOGIC_VECTOR (1 downto 0);
        tmp_3 : IN STD_LOGIC_VECTOR (3 downto 0);
        p_x_M_imag_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        p_x_M_imag_ce0 : OUT STD_LOGIC;
        p_x_M_imag_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        tmp1 : IN STD_LOGIC_VECTOR (1 downto 0);
        tmp_32 : IN STD_LOGIC_VECTOR (3 downto 0);
        p_y_M_real_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        p_y_M_real_ce0 : OUT STD_LOGIC;
        p_y_M_real_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        tmp3 : IN STD_LOGIC_VECTOR (1 downto 0);
        p_y_M_imag_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        p_y_M_imag_ce0 : OUT STD_LOGIC;
        p_y_M_imag_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        tmp4 : IN STD_LOGIC_VECTOR (1 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component TopAdder_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        ap_return : IN STD_LOGIC_VECTOR (31 downto 0);
        output_M_real_address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        output_M_real_ce0 : IN STD_LOGIC;
        output_M_real_we0 : IN STD_LOGIC;
        output_M_real_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_M_imag_address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        output_M_imag_ce0 : IN STD_LOGIC;
        output_M_imag_we0 : IN STD_LOGIC;
        output_M_imag_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        input1_M_real_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        input1_M_real_ce0 : IN STD_LOGIC;
        input1_M_real_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        input1_M_imag_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        input1_M_imag_ce0 : IN STD_LOGIC;
        input1_M_imag_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        input2_M_real_address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        input2_M_real_ce0 : IN STD_LOGIC;
        input2_M_real_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        input2_M_imag_address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        input2_M_imag_ce0 : IN STD_LOGIC;
        input2_M_imag_q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    TopAdder_AXILiteS_s_axi_U : component TopAdder_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => TopAdder_AXILiteS_s_axi_U_ap_dummy_ce,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        ap_return => ap_return,
        output_M_real_address0 => output_M_real_address0,
        output_M_real_ce0 => output_M_real_ce0,
        output_M_real_we0 => output_M_real_we0,
        output_M_real_d0 => output_M_real_d0,
        output_M_imag_address0 => output_M_imag_address0,
        output_M_imag_ce0 => output_M_imag_ce0,
        output_M_imag_we0 => output_M_imag_we0,
        output_M_imag_d0 => output_M_imag_d0,
        input1_M_real_address0 => input1_M_real_address0,
        input1_M_real_ce0 => input1_M_real_ce0,
        input1_M_real_q0 => input1_M_real_q0,
        input1_M_imag_address0 => input1_M_imag_address0,
        input1_M_imag_ce0 => input1_M_imag_ce0,
        input1_M_imag_q0 => input1_M_imag_q0,
        input2_M_real_address0 => input2_M_real_address0,
        input2_M_real_ce0 => input2_M_real_ce0,
        input2_M_real_q0 => input2_M_real_q0,
        input2_M_imag_address0 => input2_M_imag_address0,
        input2_M_imag_ce0 => input2_M_imag_ce0,
        input2_M_imag_q0 => input2_M_imag_q0);

    grp_TopAdder_addoperator_float_fu_118 : component TopAdder_addoperator_float
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_TopAdder_addoperator_float_fu_118_ap_start,
        ap_done => grp_TopAdder_addoperator_float_fu_118_ap_done,
        ap_idle => grp_TopAdder_addoperator_float_fu_118_ap_idle,
        ap_ready => grp_TopAdder_addoperator_float_fu_118_ap_ready,
        ap_ce => grp_TopAdder_addoperator_float_fu_118_ap_ce,
        p_x_M_real_address0 => grp_TopAdder_addoperator_float_fu_118_p_x_M_real_address0,
        p_x_M_real_ce0 => grp_TopAdder_addoperator_float_fu_118_p_x_M_real_ce0,
        p_x_M_real_q0 => grp_TopAdder_addoperator_float_fu_118_p_x_M_real_q0,
        tmp => grp_TopAdder_addoperator_float_fu_118_tmp,
        tmp_3 => grp_TopAdder_addoperator_float_fu_118_tmp_3,
        p_x_M_imag_address0 => grp_TopAdder_addoperator_float_fu_118_p_x_M_imag_address0,
        p_x_M_imag_ce0 => grp_TopAdder_addoperator_float_fu_118_p_x_M_imag_ce0,
        p_x_M_imag_q0 => grp_TopAdder_addoperator_float_fu_118_p_x_M_imag_q0,
        tmp1 => grp_TopAdder_addoperator_float_fu_118_tmp1,
        tmp_32 => grp_TopAdder_addoperator_float_fu_118_tmp_32,
        p_y_M_real_address0 => grp_TopAdder_addoperator_float_fu_118_p_y_M_real_address0,
        p_y_M_real_ce0 => grp_TopAdder_addoperator_float_fu_118_p_y_M_real_ce0,
        p_y_M_real_q0 => grp_TopAdder_addoperator_float_fu_118_p_y_M_real_q0,
        tmp3 => grp_TopAdder_addoperator_float_fu_118_tmp3,
        p_y_M_imag_address0 => grp_TopAdder_addoperator_float_fu_118_p_y_M_imag_address0,
        p_y_M_imag_ce0 => grp_TopAdder_addoperator_float_fu_118_p_y_M_imag_ce0,
        p_y_M_imag_q0 => grp_TopAdder_addoperator_float_fu_118_p_y_M_imag_q0,
        tmp4 => grp_TopAdder_addoperator_float_fu_118_tmp4,
        ap_return_0 => grp_TopAdder_addoperator_float_fu_118_ap_return_0,
        ap_return_1 => grp_TopAdder_addoperator_float_fu_118_ap_return_1);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_const_lv1_0 = exitcond1_fu_168_p2)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg34_fsm_35))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg34_fsm_35) and not((exitcond1_reg_186 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- grp_TopAdder_addoperator_float_fu_118_ap_start_ap_start_reg assign process. --
    grp_TopAdder_addoperator_float_fu_118_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_TopAdder_addoperator_float_fu_118_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg7_fsm_8) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg14_fsm_15)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg21_fsm_22)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg28_fsm_29)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_lv1_0 = exitcond1_fu_168_p2)))) then 
                    grp_TopAdder_addoperator_float_fu_118_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_TopAdder_addoperator_float_fu_118_ap_ready)) then 
                    grp_TopAdder_addoperator_float_fu_118_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- index_reg_106 assign process. --
    index_reg_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
                index_reg_106 <= index_1_reg_190;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                index_reg_106 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1)) then
                ap_reg_ppstg_exitcond1_reg_186_pp0_it1 <= exitcond1_reg_186;
                exitcond1_reg_186 <= exitcond1_fu_168_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1))) then
                index_1_reg_190 <= index_1_fu_174_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg8_fsm_9))) then
                output_M_imag_addr_reg_200 <= tmp_fu_180_p1(2 - 1 downto 0);
                output_M_real_addr_reg_195 <= tmp_fu_180_p1(2 - 1 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg7_fsm_8) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg14_fsm_15)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg21_fsm_22)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg28_fsm_29)) or ((exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) then
                reg_158 <= grp_TopAdder_addoperator_float_fu_118_ap_return_0;
                reg_163 <= grp_TopAdder_addoperator_float_fu_118_ap_return_1;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, exitcond1_fu_168_p2, ap_sig_cseq_ST_pp0_stg1_fsm_2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_pp0_stg0_fsm_1 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_const_lv1_0 = exitcond1_fu_168_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg1_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st39_fsm_36;
                end if;
            when ap_ST_pp0_stg1_fsm_2 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it0))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg2_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st39_fsm_36;
                end if;
            when ap_ST_pp0_stg2_fsm_3 => 
                ap_NS_fsm <= ap_ST_pp0_stg3_fsm_4;
            when ap_ST_pp0_stg3_fsm_4 => 
                ap_NS_fsm <= ap_ST_pp0_stg4_fsm_5;
            when ap_ST_pp0_stg4_fsm_5 => 
                ap_NS_fsm <= ap_ST_pp0_stg5_fsm_6;
            when ap_ST_pp0_stg5_fsm_6 => 
                ap_NS_fsm <= ap_ST_pp0_stg6_fsm_7;
            when ap_ST_pp0_stg6_fsm_7 => 
                ap_NS_fsm <= ap_ST_pp0_stg7_fsm_8;
            when ap_ST_pp0_stg7_fsm_8 => 
                ap_NS_fsm <= ap_ST_pp0_stg8_fsm_9;
            when ap_ST_pp0_stg8_fsm_9 => 
                ap_NS_fsm <= ap_ST_pp0_stg9_fsm_10;
            when ap_ST_pp0_stg9_fsm_10 => 
                ap_NS_fsm <= ap_ST_pp0_stg10_fsm_11;
            when ap_ST_pp0_stg10_fsm_11 => 
                ap_NS_fsm <= ap_ST_pp0_stg11_fsm_12;
            when ap_ST_pp0_stg11_fsm_12 => 
                ap_NS_fsm <= ap_ST_pp0_stg12_fsm_13;
            when ap_ST_pp0_stg12_fsm_13 => 
                ap_NS_fsm <= ap_ST_pp0_stg13_fsm_14;
            when ap_ST_pp0_stg13_fsm_14 => 
                ap_NS_fsm <= ap_ST_pp0_stg14_fsm_15;
            when ap_ST_pp0_stg14_fsm_15 => 
                ap_NS_fsm <= ap_ST_pp0_stg15_fsm_16;
            when ap_ST_pp0_stg15_fsm_16 => 
                ap_NS_fsm <= ap_ST_pp0_stg16_fsm_17;
            when ap_ST_pp0_stg16_fsm_17 => 
                ap_NS_fsm <= ap_ST_pp0_stg17_fsm_18;
            when ap_ST_pp0_stg17_fsm_18 => 
                ap_NS_fsm <= ap_ST_pp0_stg18_fsm_19;
            when ap_ST_pp0_stg18_fsm_19 => 
                ap_NS_fsm <= ap_ST_pp0_stg19_fsm_20;
            when ap_ST_pp0_stg19_fsm_20 => 
                ap_NS_fsm <= ap_ST_pp0_stg20_fsm_21;
            when ap_ST_pp0_stg20_fsm_21 => 
                ap_NS_fsm <= ap_ST_pp0_stg21_fsm_22;
            when ap_ST_pp0_stg21_fsm_22 => 
                ap_NS_fsm <= ap_ST_pp0_stg22_fsm_23;
            when ap_ST_pp0_stg22_fsm_23 => 
                ap_NS_fsm <= ap_ST_pp0_stg23_fsm_24;
            when ap_ST_pp0_stg23_fsm_24 => 
                ap_NS_fsm <= ap_ST_pp0_stg24_fsm_25;
            when ap_ST_pp0_stg24_fsm_25 => 
                ap_NS_fsm <= ap_ST_pp0_stg25_fsm_26;
            when ap_ST_pp0_stg25_fsm_26 => 
                ap_NS_fsm <= ap_ST_pp0_stg26_fsm_27;
            when ap_ST_pp0_stg26_fsm_27 => 
                ap_NS_fsm <= ap_ST_pp0_stg27_fsm_28;
            when ap_ST_pp0_stg27_fsm_28 => 
                ap_NS_fsm <= ap_ST_pp0_stg28_fsm_29;
            when ap_ST_pp0_stg28_fsm_29 => 
                ap_NS_fsm <= ap_ST_pp0_stg29_fsm_30;
            when ap_ST_pp0_stg29_fsm_30 => 
                ap_NS_fsm <= ap_ST_pp0_stg30_fsm_31;
            when ap_ST_pp0_stg30_fsm_31 => 
                ap_NS_fsm <= ap_ST_pp0_stg31_fsm_32;
            when ap_ST_pp0_stg31_fsm_32 => 
                ap_NS_fsm <= ap_ST_pp0_stg32_fsm_33;
            when ap_ST_pp0_stg32_fsm_33 => 
                ap_NS_fsm <= ap_ST_pp0_stg33_fsm_34;
            when ap_ST_pp0_stg33_fsm_34 => 
                ap_NS_fsm <= ap_ST_pp0_stg34_fsm_35;
            when ap_ST_pp0_stg34_fsm_35 => 
                ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
            when ap_ST_st39_fsm_36 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    TopAdder_AXILiteS_s_axi_U_ap_dummy_ce <= ap_const_logic_1;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_sig_cseq_ST_st39_fsm_36)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st39_fsm_36)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st39_fsm_36)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st39_fsm_36)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= ap_const_lv32_0;

    -- ap_rst_n_inv assign process. --
    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    -- ap_sig_bdd_140 assign process. --
    ap_sig_bdd_140_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_140 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_bdd_154 assign process. --
    ap_sig_bdd_154_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_154 <= (ap_const_lv1_1 = ap_CS_fsm(15 downto 15));
    end process;


    -- ap_sig_bdd_164 assign process. --
    ap_sig_bdd_164_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_164 <= (ap_const_lv1_1 = ap_CS_fsm(22 downto 22));
    end process;


    -- ap_sig_bdd_174 assign process. --
    ap_sig_bdd_174_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_174 <= (ap_const_lv1_1 = ap_CS_fsm(29 downto 29));
    end process;


    -- ap_sig_bdd_184 assign process. --
    ap_sig_bdd_184_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_184 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_206 assign process. --
    ap_sig_bdd_206_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_206 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    -- ap_sig_bdd_222 assign process. --
    ap_sig_bdd_222_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_222 <= (ap_const_lv1_1 = ap_CS_fsm(35 downto 35));
    end process;


    -- ap_sig_bdd_269 assign process. --
    ap_sig_bdd_269_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_269 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_278 assign process. --
    ap_sig_bdd_278_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_278 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_288 assign process. --
    ap_sig_bdd_288_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_288 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_298 assign process. --
    ap_sig_bdd_298_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_298 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_308 assign process. --
    ap_sig_bdd_308_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_308 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_318 assign process. --
    ap_sig_bdd_318_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_318 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_332 assign process. --
    ap_sig_bdd_332_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_332 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    -- ap_sig_bdd_342 assign process. --
    ap_sig_bdd_342_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_342 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    -- ap_sig_bdd_352 assign process. --
    ap_sig_bdd_352_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_352 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    -- ap_sig_bdd_362 assign process. --
    ap_sig_bdd_362_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_362 <= (ap_const_lv1_1 = ap_CS_fsm(13 downto 13));
    end process;


    -- ap_sig_bdd_372 assign process. --
    ap_sig_bdd_372_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_372 <= (ap_const_lv1_1 = ap_CS_fsm(14 downto 14));
    end process;


    -- ap_sig_bdd_383 assign process. --
    ap_sig_bdd_383_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_383 <= (ap_const_lv1_1 = ap_CS_fsm(16 downto 16));
    end process;


    -- ap_sig_bdd_393 assign process. --
    ap_sig_bdd_393_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_393 <= (ap_const_lv1_1 = ap_CS_fsm(17 downto 17));
    end process;


    -- ap_sig_bdd_403 assign process. --
    ap_sig_bdd_403_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_403 <= (ap_const_lv1_1 = ap_CS_fsm(18 downto 18));
    end process;


    -- ap_sig_bdd_413 assign process. --
    ap_sig_bdd_413_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_413 <= (ap_const_lv1_1 = ap_CS_fsm(19 downto 19));
    end process;


    -- ap_sig_bdd_423 assign process. --
    ap_sig_bdd_423_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_423 <= (ap_const_lv1_1 = ap_CS_fsm(20 downto 20));
    end process;


    -- ap_sig_bdd_433 assign process. --
    ap_sig_bdd_433_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_433 <= (ap_const_lv1_1 = ap_CS_fsm(21 downto 21));
    end process;


    -- ap_sig_bdd_444 assign process. --
    ap_sig_bdd_444_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_444 <= (ap_const_lv1_1 = ap_CS_fsm(23 downto 23));
    end process;


    -- ap_sig_bdd_454 assign process. --
    ap_sig_bdd_454_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_454 <= (ap_const_lv1_1 = ap_CS_fsm(24 downto 24));
    end process;


    -- ap_sig_bdd_464 assign process. --
    ap_sig_bdd_464_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_464 <= (ap_const_lv1_1 = ap_CS_fsm(25 downto 25));
    end process;


    -- ap_sig_bdd_474 assign process. --
    ap_sig_bdd_474_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_474 <= (ap_const_lv1_1 = ap_CS_fsm(26 downto 26));
    end process;


    -- ap_sig_bdd_484 assign process. --
    ap_sig_bdd_484_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_484 <= (ap_const_lv1_1 = ap_CS_fsm(27 downto 27));
    end process;


    -- ap_sig_bdd_494 assign process. --
    ap_sig_bdd_494_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_494 <= (ap_const_lv1_1 = ap_CS_fsm(28 downto 28));
    end process;


    -- ap_sig_bdd_505 assign process. --
    ap_sig_bdd_505_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_505 <= (ap_const_lv1_1 = ap_CS_fsm(30 downto 30));
    end process;


    -- ap_sig_bdd_515 assign process. --
    ap_sig_bdd_515_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_515 <= (ap_const_lv1_1 = ap_CS_fsm(31 downto 31));
    end process;


    -- ap_sig_bdd_525 assign process. --
    ap_sig_bdd_525_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_525 <= (ap_const_lv1_1 = ap_CS_fsm(32 downto 32));
    end process;


    -- ap_sig_bdd_535 assign process. --
    ap_sig_bdd_535_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_535 <= (ap_const_lv1_1 = ap_CS_fsm(33 downto 33));
    end process;


    -- ap_sig_bdd_545 assign process. --
    ap_sig_bdd_545_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_545 <= (ap_const_lv1_1 = ap_CS_fsm(34 downto 34));
    end process;


    -- ap_sig_bdd_55 assign process. --
    ap_sig_bdd_55_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_55 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_604 assign process. --
    ap_sig_bdd_604_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_604 <= (ap_const_lv1_1 = ap_CS_fsm(36 downto 36));
    end process;


    -- ap_sig_bdd_661 assign process. --
    ap_sig_bdd_661_assign_proc : process(ap_reg_ppiten_pp0_it0, exitcond1_reg_186)
    begin
                ap_sig_bdd_661 <= ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_1 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_1_assign_proc : process(ap_sig_bdd_184)
    begin
        if (ap_sig_bdd_184) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg10_fsm_11 assign process. --
    ap_sig_cseq_ST_pp0_stg10_fsm_11_assign_proc : process(ap_sig_bdd_342)
    begin
        if (ap_sig_bdd_342) then 
            ap_sig_cseq_ST_pp0_stg10_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg10_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg11_fsm_12 assign process. --
    ap_sig_cseq_ST_pp0_stg11_fsm_12_assign_proc : process(ap_sig_bdd_352)
    begin
        if (ap_sig_bdd_352) then 
            ap_sig_cseq_ST_pp0_stg11_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg11_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg12_fsm_13 assign process. --
    ap_sig_cseq_ST_pp0_stg12_fsm_13_assign_proc : process(ap_sig_bdd_362)
    begin
        if (ap_sig_bdd_362) then 
            ap_sig_cseq_ST_pp0_stg12_fsm_13 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg12_fsm_13 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg13_fsm_14 assign process. --
    ap_sig_cseq_ST_pp0_stg13_fsm_14_assign_proc : process(ap_sig_bdd_372)
    begin
        if (ap_sig_bdd_372) then 
            ap_sig_cseq_ST_pp0_stg13_fsm_14 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg13_fsm_14 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg14_fsm_15 assign process. --
    ap_sig_cseq_ST_pp0_stg14_fsm_15_assign_proc : process(ap_sig_bdd_154)
    begin
        if (ap_sig_bdd_154) then 
            ap_sig_cseq_ST_pp0_stg14_fsm_15 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg14_fsm_15 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg15_fsm_16 assign process. --
    ap_sig_cseq_ST_pp0_stg15_fsm_16_assign_proc : process(ap_sig_bdd_383)
    begin
        if (ap_sig_bdd_383) then 
            ap_sig_cseq_ST_pp0_stg15_fsm_16 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg15_fsm_16 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg16_fsm_17 assign process. --
    ap_sig_cseq_ST_pp0_stg16_fsm_17_assign_proc : process(ap_sig_bdd_393)
    begin
        if (ap_sig_bdd_393) then 
            ap_sig_cseq_ST_pp0_stg16_fsm_17 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg16_fsm_17 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg17_fsm_18 assign process. --
    ap_sig_cseq_ST_pp0_stg17_fsm_18_assign_proc : process(ap_sig_bdd_403)
    begin
        if (ap_sig_bdd_403) then 
            ap_sig_cseq_ST_pp0_stg17_fsm_18 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg17_fsm_18 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg18_fsm_19 assign process. --
    ap_sig_cseq_ST_pp0_stg18_fsm_19_assign_proc : process(ap_sig_bdd_413)
    begin
        if (ap_sig_bdd_413) then 
            ap_sig_cseq_ST_pp0_stg18_fsm_19 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg18_fsm_19 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg19_fsm_20 assign process. --
    ap_sig_cseq_ST_pp0_stg19_fsm_20_assign_proc : process(ap_sig_bdd_423)
    begin
        if (ap_sig_bdd_423) then 
            ap_sig_cseq_ST_pp0_stg19_fsm_20 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg19_fsm_20 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg1_fsm_2 assign process. --
    ap_sig_cseq_ST_pp0_stg1_fsm_2_assign_proc : process(ap_sig_bdd_269)
    begin
        if (ap_sig_bdd_269) then 
            ap_sig_cseq_ST_pp0_stg1_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg1_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg20_fsm_21 assign process. --
    ap_sig_cseq_ST_pp0_stg20_fsm_21_assign_proc : process(ap_sig_bdd_433)
    begin
        if (ap_sig_bdd_433) then 
            ap_sig_cseq_ST_pp0_stg20_fsm_21 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg20_fsm_21 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg21_fsm_22 assign process. --
    ap_sig_cseq_ST_pp0_stg21_fsm_22_assign_proc : process(ap_sig_bdd_164)
    begin
        if (ap_sig_bdd_164) then 
            ap_sig_cseq_ST_pp0_stg21_fsm_22 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg21_fsm_22 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg22_fsm_23 assign process. --
    ap_sig_cseq_ST_pp0_stg22_fsm_23_assign_proc : process(ap_sig_bdd_444)
    begin
        if (ap_sig_bdd_444) then 
            ap_sig_cseq_ST_pp0_stg22_fsm_23 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg22_fsm_23 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg23_fsm_24 assign process. --
    ap_sig_cseq_ST_pp0_stg23_fsm_24_assign_proc : process(ap_sig_bdd_454)
    begin
        if (ap_sig_bdd_454) then 
            ap_sig_cseq_ST_pp0_stg23_fsm_24 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg23_fsm_24 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg24_fsm_25 assign process. --
    ap_sig_cseq_ST_pp0_stg24_fsm_25_assign_proc : process(ap_sig_bdd_464)
    begin
        if (ap_sig_bdd_464) then 
            ap_sig_cseq_ST_pp0_stg24_fsm_25 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg24_fsm_25 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg25_fsm_26 assign process. --
    ap_sig_cseq_ST_pp0_stg25_fsm_26_assign_proc : process(ap_sig_bdd_474)
    begin
        if (ap_sig_bdd_474) then 
            ap_sig_cseq_ST_pp0_stg25_fsm_26 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg25_fsm_26 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg26_fsm_27 assign process. --
    ap_sig_cseq_ST_pp0_stg26_fsm_27_assign_proc : process(ap_sig_bdd_484)
    begin
        if (ap_sig_bdd_484) then 
            ap_sig_cseq_ST_pp0_stg26_fsm_27 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg26_fsm_27 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg27_fsm_28 assign process. --
    ap_sig_cseq_ST_pp0_stg27_fsm_28_assign_proc : process(ap_sig_bdd_494)
    begin
        if (ap_sig_bdd_494) then 
            ap_sig_cseq_ST_pp0_stg27_fsm_28 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg27_fsm_28 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg28_fsm_29 assign process. --
    ap_sig_cseq_ST_pp0_stg28_fsm_29_assign_proc : process(ap_sig_bdd_174)
    begin
        if (ap_sig_bdd_174) then 
            ap_sig_cseq_ST_pp0_stg28_fsm_29 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg28_fsm_29 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg29_fsm_30 assign process. --
    ap_sig_cseq_ST_pp0_stg29_fsm_30_assign_proc : process(ap_sig_bdd_505)
    begin
        if (ap_sig_bdd_505) then 
            ap_sig_cseq_ST_pp0_stg29_fsm_30 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg29_fsm_30 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg2_fsm_3 assign process. --
    ap_sig_cseq_ST_pp0_stg2_fsm_3_assign_proc : process(ap_sig_bdd_278)
    begin
        if (ap_sig_bdd_278) then 
            ap_sig_cseq_ST_pp0_stg2_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg2_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg30_fsm_31 assign process. --
    ap_sig_cseq_ST_pp0_stg30_fsm_31_assign_proc : process(ap_sig_bdd_515)
    begin
        if (ap_sig_bdd_515) then 
            ap_sig_cseq_ST_pp0_stg30_fsm_31 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg30_fsm_31 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg31_fsm_32 assign process. --
    ap_sig_cseq_ST_pp0_stg31_fsm_32_assign_proc : process(ap_sig_bdd_525)
    begin
        if (ap_sig_bdd_525) then 
            ap_sig_cseq_ST_pp0_stg31_fsm_32 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg31_fsm_32 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg32_fsm_33 assign process. --
    ap_sig_cseq_ST_pp0_stg32_fsm_33_assign_proc : process(ap_sig_bdd_535)
    begin
        if (ap_sig_bdd_535) then 
            ap_sig_cseq_ST_pp0_stg32_fsm_33 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg32_fsm_33 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg33_fsm_34 assign process. --
    ap_sig_cseq_ST_pp0_stg33_fsm_34_assign_proc : process(ap_sig_bdd_545)
    begin
        if (ap_sig_bdd_545) then 
            ap_sig_cseq_ST_pp0_stg33_fsm_34 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg33_fsm_34 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg34_fsm_35 assign process. --
    ap_sig_cseq_ST_pp0_stg34_fsm_35_assign_proc : process(ap_sig_bdd_222)
    begin
        if (ap_sig_bdd_222) then 
            ap_sig_cseq_ST_pp0_stg34_fsm_35 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg34_fsm_35 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg3_fsm_4 assign process. --
    ap_sig_cseq_ST_pp0_stg3_fsm_4_assign_proc : process(ap_sig_bdd_288)
    begin
        if (ap_sig_bdd_288) then 
            ap_sig_cseq_ST_pp0_stg3_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg3_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg4_fsm_5 assign process. --
    ap_sig_cseq_ST_pp0_stg4_fsm_5_assign_proc : process(ap_sig_bdd_298)
    begin
        if (ap_sig_bdd_298) then 
            ap_sig_cseq_ST_pp0_stg4_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg4_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg5_fsm_6 assign process. --
    ap_sig_cseq_ST_pp0_stg5_fsm_6_assign_proc : process(ap_sig_bdd_308)
    begin
        if (ap_sig_bdd_308) then 
            ap_sig_cseq_ST_pp0_stg5_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg5_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg6_fsm_7 assign process. --
    ap_sig_cseq_ST_pp0_stg6_fsm_7_assign_proc : process(ap_sig_bdd_318)
    begin
        if (ap_sig_bdd_318) then 
            ap_sig_cseq_ST_pp0_stg6_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg6_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg7_fsm_8 assign process. --
    ap_sig_cseq_ST_pp0_stg7_fsm_8_assign_proc : process(ap_sig_bdd_140)
    begin
        if (ap_sig_bdd_140) then 
            ap_sig_cseq_ST_pp0_stg7_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg7_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg8_fsm_9 assign process. --
    ap_sig_cseq_ST_pp0_stg8_fsm_9_assign_proc : process(ap_sig_bdd_206)
    begin
        if (ap_sig_bdd_206) then 
            ap_sig_cseq_ST_pp0_stg8_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg8_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg9_fsm_10 assign process. --
    ap_sig_cseq_ST_pp0_stg9_fsm_10_assign_proc : process(ap_sig_bdd_332)
    begin
        if (ap_sig_bdd_332) then 
            ap_sig_cseq_ST_pp0_stg9_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg9_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_55)
    begin
        if (ap_sig_bdd_55) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st39_fsm_36 assign process. --
    ap_sig_cseq_ST_st39_fsm_36_assign_proc : process(ap_sig_bdd_604)
    begin
        if (ap_sig_bdd_604) then 
            ap_sig_cseq_ST_st39_fsm_36 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st39_fsm_36 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_168_p2 <= "1" when (index_phi_fu_110_p4 = ap_const_lv2_3) else "0";
    grp_TopAdder_addoperator_float_fu_118_ap_ce <= ap_const_logic_1;
    grp_TopAdder_addoperator_float_fu_118_ap_start <= grp_TopAdder_addoperator_float_fu_118_ap_start_ap_start_reg;
    grp_TopAdder_addoperator_float_fu_118_p_x_M_imag_q0 <= input1_M_imag_q0;
    grp_TopAdder_addoperator_float_fu_118_p_x_M_real_q0 <= input1_M_real_q0;
    grp_TopAdder_addoperator_float_fu_118_p_y_M_imag_q0 <= input2_M_imag_q0;
    grp_TopAdder_addoperator_float_fu_118_p_y_M_real_q0 <= input2_M_real_q0;
    grp_TopAdder_addoperator_float_fu_118_tmp <= index_reg_106;
    grp_TopAdder_addoperator_float_fu_118_tmp1 <= index_reg_106;
    grp_TopAdder_addoperator_float_fu_118_tmp3 <= index_reg_106;
    grp_TopAdder_addoperator_float_fu_118_tmp4 <= index_reg_106;

    -- grp_TopAdder_addoperator_float_fu_118_tmp_3 assign process. --
    grp_TopAdder_addoperator_float_fu_118_tmp_3_assign_proc : process(ap_sig_cseq_ST_pp0_stg8_fsm_9, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg15_fsm_16, ap_sig_cseq_ST_pp0_stg22_fsm_23, ap_sig_cseq_ST_pp0_stg29_fsm_30, ap_sig_bdd_661)
    begin
        if (ap_sig_bdd_661) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg29_fsm_30)) then 
                grp_TopAdder_addoperator_float_fu_118_tmp_3 <= ap_const_lv4_4;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg22_fsm_23)) then 
                grp_TopAdder_addoperator_float_fu_118_tmp_3 <= ap_const_lv4_3;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg15_fsm_16)) then 
                grp_TopAdder_addoperator_float_fu_118_tmp_3 <= ap_const_lv4_2;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg8_fsm_9)) then 
                grp_TopAdder_addoperator_float_fu_118_tmp_3 <= ap_const_lv4_1;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) then 
                grp_TopAdder_addoperator_float_fu_118_tmp_3 <= ap_const_lv4_0;
            else 
                grp_TopAdder_addoperator_float_fu_118_tmp_3 <= "XXXX";
            end if;
        else 
            grp_TopAdder_addoperator_float_fu_118_tmp_3 <= "XXXX";
        end if; 
    end process;


    -- grp_TopAdder_addoperator_float_fu_118_tmp_32 assign process. --
    grp_TopAdder_addoperator_float_fu_118_tmp_32_assign_proc : process(ap_sig_cseq_ST_pp0_stg8_fsm_9, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg15_fsm_16, ap_sig_cseq_ST_pp0_stg22_fsm_23, ap_sig_cseq_ST_pp0_stg29_fsm_30, ap_sig_bdd_661)
    begin
        if (ap_sig_bdd_661) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg29_fsm_30)) then 
                grp_TopAdder_addoperator_float_fu_118_tmp_32 <= ap_const_lv4_4;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg22_fsm_23)) then 
                grp_TopAdder_addoperator_float_fu_118_tmp_32 <= ap_const_lv4_3;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg15_fsm_16)) then 
                grp_TopAdder_addoperator_float_fu_118_tmp_32 <= ap_const_lv4_2;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg8_fsm_9)) then 
                grp_TopAdder_addoperator_float_fu_118_tmp_32 <= ap_const_lv4_1;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) then 
                grp_TopAdder_addoperator_float_fu_118_tmp_32 <= ap_const_lv4_0;
            else 
                grp_TopAdder_addoperator_float_fu_118_tmp_32 <= "XXXX";
            end if;
        else 
            grp_TopAdder_addoperator_float_fu_118_tmp_32 <= "XXXX";
        end if; 
    end process;

    index_1_fu_174_p2 <= std_logic_vector(unsigned(index_phi_fu_110_p4) + unsigned(ap_const_lv2_1));

    -- index_phi_fu_110_p4 assign process. --
    index_phi_fu_110_p4_assign_proc : process(index_reg_106, exitcond1_reg_186, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, index_1_reg_190)
    begin
        if (((exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            index_phi_fu_110_p4 <= index_1_reg_190;
        else 
            index_phi_fu_110_p4 <= index_reg_106;
        end if; 
    end process;

    input1_M_imag_address0 <= grp_TopAdder_addoperator_float_fu_118_p_x_M_imag_address0;

    -- input1_M_imag_ce0 assign process. --
    input1_M_imag_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg7_fsm_8, ap_reg_ppiten_pp0_it0, exitcond1_reg_186, ap_sig_cseq_ST_pp0_stg14_fsm_15, ap_sig_cseq_ST_pp0_stg21_fsm_22, ap_sig_cseq_ST_pp0_stg28_fsm_29, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg8_fsm_9, ap_sig_cseq_ST_pp0_stg34_fsm_35, grp_TopAdder_addoperator_float_fu_118_p_x_M_imag_ce0, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4, ap_sig_cseq_ST_pp0_stg4_fsm_5, ap_sig_cseq_ST_pp0_stg5_fsm_6, ap_sig_cseq_ST_pp0_stg6_fsm_7, ap_sig_cseq_ST_pp0_stg9_fsm_10, ap_sig_cseq_ST_pp0_stg10_fsm_11, ap_sig_cseq_ST_pp0_stg11_fsm_12, ap_sig_cseq_ST_pp0_stg12_fsm_13, ap_sig_cseq_ST_pp0_stg13_fsm_14, ap_sig_cseq_ST_pp0_stg15_fsm_16, ap_sig_cseq_ST_pp0_stg16_fsm_17, ap_sig_cseq_ST_pp0_stg17_fsm_18, ap_sig_cseq_ST_pp0_stg18_fsm_19, ap_sig_cseq_ST_pp0_stg19_fsm_20, ap_sig_cseq_ST_pp0_stg20_fsm_21, ap_sig_cseq_ST_pp0_stg22_fsm_23, ap_sig_cseq_ST_pp0_stg23_fsm_24, ap_sig_cseq_ST_pp0_stg24_fsm_25, ap_sig_cseq_ST_pp0_stg25_fsm_26, ap_sig_cseq_ST_pp0_stg26_fsm_27, ap_sig_cseq_ST_pp0_stg27_fsm_28, ap_sig_cseq_ST_pp0_stg29_fsm_30, ap_sig_cseq_ST_pp0_stg30_fsm_31, ap_sig_cseq_ST_pp0_stg31_fsm_32, ap_sig_cseq_ST_pp0_stg32_fsm_33, ap_sig_cseq_ST_pp0_stg33_fsm_34)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg7_fsm_8) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg14_fsm_15)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg21_fsm_22)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg28_fsm_29)) or ((exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_5)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_6)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg6_fsm_7)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg8_fsm_9)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg9_fsm_10)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg10_fsm_11)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg11_fsm_12)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg12_fsm_13)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg13_fsm_14)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg15_fsm_16)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg16_fsm_17)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg17_fsm_18)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg18_fsm_19)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg19_fsm_20)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg20_fsm_21)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg22_fsm_23)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg23_fsm_24)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg24_fsm_25)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg25_fsm_26)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg26_fsm_27)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg27_fsm_28)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg29_fsm_30)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg30_fsm_31)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg31_fsm_32)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg32_fsm_33)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg33_fsm_34)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg34_fsm_35)))) then 
            input1_M_imag_ce0 <= grp_TopAdder_addoperator_float_fu_118_p_x_M_imag_ce0;
        else 
            input1_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input1_M_real_address0 <= grp_TopAdder_addoperator_float_fu_118_p_x_M_real_address0;

    -- input1_M_real_ce0 assign process. --
    input1_M_real_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg7_fsm_8, ap_reg_ppiten_pp0_it0, exitcond1_reg_186, ap_sig_cseq_ST_pp0_stg14_fsm_15, ap_sig_cseq_ST_pp0_stg21_fsm_22, ap_sig_cseq_ST_pp0_stg28_fsm_29, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg8_fsm_9, ap_sig_cseq_ST_pp0_stg34_fsm_35, grp_TopAdder_addoperator_float_fu_118_p_x_M_real_ce0, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4, ap_sig_cseq_ST_pp0_stg4_fsm_5, ap_sig_cseq_ST_pp0_stg5_fsm_6, ap_sig_cseq_ST_pp0_stg6_fsm_7, ap_sig_cseq_ST_pp0_stg9_fsm_10, ap_sig_cseq_ST_pp0_stg10_fsm_11, ap_sig_cseq_ST_pp0_stg11_fsm_12, ap_sig_cseq_ST_pp0_stg12_fsm_13, ap_sig_cseq_ST_pp0_stg13_fsm_14, ap_sig_cseq_ST_pp0_stg15_fsm_16, ap_sig_cseq_ST_pp0_stg16_fsm_17, ap_sig_cseq_ST_pp0_stg17_fsm_18, ap_sig_cseq_ST_pp0_stg18_fsm_19, ap_sig_cseq_ST_pp0_stg19_fsm_20, ap_sig_cseq_ST_pp0_stg20_fsm_21, ap_sig_cseq_ST_pp0_stg22_fsm_23, ap_sig_cseq_ST_pp0_stg23_fsm_24, ap_sig_cseq_ST_pp0_stg24_fsm_25, ap_sig_cseq_ST_pp0_stg25_fsm_26, ap_sig_cseq_ST_pp0_stg26_fsm_27, ap_sig_cseq_ST_pp0_stg27_fsm_28, ap_sig_cseq_ST_pp0_stg29_fsm_30, ap_sig_cseq_ST_pp0_stg30_fsm_31, ap_sig_cseq_ST_pp0_stg31_fsm_32, ap_sig_cseq_ST_pp0_stg32_fsm_33, ap_sig_cseq_ST_pp0_stg33_fsm_34)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg7_fsm_8) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg14_fsm_15)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg21_fsm_22)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg28_fsm_29)) or ((exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_5)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_6)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg6_fsm_7)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg8_fsm_9)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg9_fsm_10)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg10_fsm_11)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg11_fsm_12)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg12_fsm_13)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg13_fsm_14)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg15_fsm_16)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg16_fsm_17)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg17_fsm_18)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg18_fsm_19)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg19_fsm_20)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg20_fsm_21)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg22_fsm_23)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg23_fsm_24)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg24_fsm_25)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg25_fsm_26)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg26_fsm_27)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg27_fsm_28)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg29_fsm_30)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg30_fsm_31)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg31_fsm_32)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg32_fsm_33)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg33_fsm_34)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg34_fsm_35)))) then 
            input1_M_real_ce0 <= grp_TopAdder_addoperator_float_fu_118_p_x_M_real_ce0;
        else 
            input1_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input2_M_imag_address0 <= grp_TopAdder_addoperator_float_fu_118_p_y_M_imag_address0;

    -- input2_M_imag_ce0 assign process. --
    input2_M_imag_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg7_fsm_8, ap_reg_ppiten_pp0_it0, exitcond1_reg_186, ap_sig_cseq_ST_pp0_stg14_fsm_15, ap_sig_cseq_ST_pp0_stg21_fsm_22, ap_sig_cseq_ST_pp0_stg28_fsm_29, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg8_fsm_9, ap_sig_cseq_ST_pp0_stg34_fsm_35, grp_TopAdder_addoperator_float_fu_118_p_y_M_imag_ce0, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4, ap_sig_cseq_ST_pp0_stg4_fsm_5, ap_sig_cseq_ST_pp0_stg5_fsm_6, ap_sig_cseq_ST_pp0_stg6_fsm_7, ap_sig_cseq_ST_pp0_stg9_fsm_10, ap_sig_cseq_ST_pp0_stg10_fsm_11, ap_sig_cseq_ST_pp0_stg11_fsm_12, ap_sig_cseq_ST_pp0_stg12_fsm_13, ap_sig_cseq_ST_pp0_stg13_fsm_14, ap_sig_cseq_ST_pp0_stg15_fsm_16, ap_sig_cseq_ST_pp0_stg16_fsm_17, ap_sig_cseq_ST_pp0_stg17_fsm_18, ap_sig_cseq_ST_pp0_stg18_fsm_19, ap_sig_cseq_ST_pp0_stg19_fsm_20, ap_sig_cseq_ST_pp0_stg20_fsm_21, ap_sig_cseq_ST_pp0_stg22_fsm_23, ap_sig_cseq_ST_pp0_stg23_fsm_24, ap_sig_cseq_ST_pp0_stg24_fsm_25, ap_sig_cseq_ST_pp0_stg25_fsm_26, ap_sig_cseq_ST_pp0_stg26_fsm_27, ap_sig_cseq_ST_pp0_stg27_fsm_28, ap_sig_cseq_ST_pp0_stg29_fsm_30, ap_sig_cseq_ST_pp0_stg30_fsm_31, ap_sig_cseq_ST_pp0_stg31_fsm_32, ap_sig_cseq_ST_pp0_stg32_fsm_33, ap_sig_cseq_ST_pp0_stg33_fsm_34)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg7_fsm_8) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg14_fsm_15)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg21_fsm_22)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg28_fsm_29)) or ((exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_5)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_6)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg6_fsm_7)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg8_fsm_9)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg9_fsm_10)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg10_fsm_11)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg11_fsm_12)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg12_fsm_13)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg13_fsm_14)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg15_fsm_16)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg16_fsm_17)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg17_fsm_18)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg18_fsm_19)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg19_fsm_20)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg20_fsm_21)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg22_fsm_23)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg23_fsm_24)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg24_fsm_25)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg25_fsm_26)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg26_fsm_27)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg27_fsm_28)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg29_fsm_30)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg30_fsm_31)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg31_fsm_32)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg32_fsm_33)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg33_fsm_34)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg34_fsm_35)))) then 
            input2_M_imag_ce0 <= grp_TopAdder_addoperator_float_fu_118_p_y_M_imag_ce0;
        else 
            input2_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input2_M_real_address0 <= grp_TopAdder_addoperator_float_fu_118_p_y_M_real_address0;

    -- input2_M_real_ce0 assign process. --
    input2_M_real_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg7_fsm_8, ap_reg_ppiten_pp0_it0, exitcond1_reg_186, ap_sig_cseq_ST_pp0_stg14_fsm_15, ap_sig_cseq_ST_pp0_stg21_fsm_22, ap_sig_cseq_ST_pp0_stg28_fsm_29, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg8_fsm_9, ap_sig_cseq_ST_pp0_stg34_fsm_35, grp_TopAdder_addoperator_float_fu_118_p_y_M_real_ce0, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4, ap_sig_cseq_ST_pp0_stg4_fsm_5, ap_sig_cseq_ST_pp0_stg5_fsm_6, ap_sig_cseq_ST_pp0_stg6_fsm_7, ap_sig_cseq_ST_pp0_stg9_fsm_10, ap_sig_cseq_ST_pp0_stg10_fsm_11, ap_sig_cseq_ST_pp0_stg11_fsm_12, ap_sig_cseq_ST_pp0_stg12_fsm_13, ap_sig_cseq_ST_pp0_stg13_fsm_14, ap_sig_cseq_ST_pp0_stg15_fsm_16, ap_sig_cseq_ST_pp0_stg16_fsm_17, ap_sig_cseq_ST_pp0_stg17_fsm_18, ap_sig_cseq_ST_pp0_stg18_fsm_19, ap_sig_cseq_ST_pp0_stg19_fsm_20, ap_sig_cseq_ST_pp0_stg20_fsm_21, ap_sig_cseq_ST_pp0_stg22_fsm_23, ap_sig_cseq_ST_pp0_stg23_fsm_24, ap_sig_cseq_ST_pp0_stg24_fsm_25, ap_sig_cseq_ST_pp0_stg25_fsm_26, ap_sig_cseq_ST_pp0_stg26_fsm_27, ap_sig_cseq_ST_pp0_stg27_fsm_28, ap_sig_cseq_ST_pp0_stg29_fsm_30, ap_sig_cseq_ST_pp0_stg30_fsm_31, ap_sig_cseq_ST_pp0_stg31_fsm_32, ap_sig_cseq_ST_pp0_stg32_fsm_33, ap_sig_cseq_ST_pp0_stg33_fsm_34)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg7_fsm_8) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg14_fsm_15)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg21_fsm_22)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg28_fsm_29)) or ((exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_5)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_6)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg6_fsm_7)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg8_fsm_9)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg9_fsm_10)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg10_fsm_11)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg11_fsm_12)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg12_fsm_13)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg13_fsm_14)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg15_fsm_16)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg16_fsm_17)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg17_fsm_18)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg18_fsm_19)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg19_fsm_20)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg20_fsm_21)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg22_fsm_23)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg23_fsm_24)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg24_fsm_25)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg25_fsm_26)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg26_fsm_27)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg27_fsm_28)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg29_fsm_30)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg30_fsm_31)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg31_fsm_32)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg32_fsm_33)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg33_fsm_34)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg34_fsm_35)))) then 
            input2_M_real_ce0 <= grp_TopAdder_addoperator_float_fu_118_p_y_M_real_ce0;
        else 
            input2_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- output_M_imag_address0 assign process. --
    output_M_imag_address0_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg8_fsm_9, output_M_imag_addr_reg_200, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg15_fsm_16, ap_sig_cseq_ST_pp0_stg22_fsm_23, ap_sig_cseq_ST_pp0_stg29_fsm_30, tmp_fu_180_p1)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg15_fsm_16)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg22_fsm_23)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg29_fsm_30)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)))) then 
            output_M_imag_address0 <= output_M_imag_addr_reg_200;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg8_fsm_9))) then 
            output_M_imag_address0 <= tmp_fu_180_p1(2 - 1 downto 0);
        else 
            output_M_imag_address0 <= "XX";
        end if; 
    end process;


    -- output_M_imag_ce0 assign process. --
    output_M_imag_ce0_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg8_fsm_9, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg15_fsm_16, ap_sig_cseq_ST_pp0_stg22_fsm_23, ap_sig_cseq_ST_pp0_stg29_fsm_30)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg8_fsm_9)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg15_fsm_16)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg22_fsm_23)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg29_fsm_30)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)))) then 
            output_M_imag_ce0 <= ap_const_logic_1;
        else 
            output_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_M_imag_d0 <= reg_163;

    -- output_M_imag_we0 assign process. --
    output_M_imag_we0_assign_proc : process(ap_reg_ppiten_pp0_it0, exitcond1_reg_186, ap_reg_ppiten_pp0_it1, ap_reg_ppstg_exitcond1_reg_186_pp0_it1, ap_sig_cseq_ST_pp0_stg8_fsm_9, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg15_fsm_16, ap_sig_cseq_ST_pp0_stg22_fsm_23, ap_sig_cseq_ST_pp0_stg29_fsm_30)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg8_fsm_9)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg15_fsm_16)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg22_fsm_23)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg29_fsm_30)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_186_pp0_it1)))) then 
            output_M_imag_we0 <= ap_const_logic_1;
        else 
            output_M_imag_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- output_M_real_address0 assign process. --
    output_M_real_address0_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, output_M_real_addr_reg_195, ap_sig_cseq_ST_pp0_stg8_fsm_9, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg15_fsm_16, ap_sig_cseq_ST_pp0_stg22_fsm_23, ap_sig_cseq_ST_pp0_stg29_fsm_30, tmp_fu_180_p1)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg15_fsm_16)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg22_fsm_23)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg29_fsm_30)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)))) then 
            output_M_real_address0 <= output_M_real_addr_reg_195;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg8_fsm_9))) then 
            output_M_real_address0 <= tmp_fu_180_p1(2 - 1 downto 0);
        else 
            output_M_real_address0 <= "XX";
        end if; 
    end process;


    -- output_M_real_ce0 assign process. --
    output_M_real_ce0_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg8_fsm_9, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg15_fsm_16, ap_sig_cseq_ST_pp0_stg22_fsm_23, ap_sig_cseq_ST_pp0_stg29_fsm_30)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg8_fsm_9)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg15_fsm_16)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg22_fsm_23)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg29_fsm_30)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)))) then 
            output_M_real_ce0 <= ap_const_logic_1;
        else 
            output_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_M_real_d0 <= reg_158;

    -- output_M_real_we0 assign process. --
    output_M_real_we0_assign_proc : process(ap_reg_ppiten_pp0_it0, exitcond1_reg_186, ap_reg_ppiten_pp0_it1, ap_reg_ppstg_exitcond1_reg_186_pp0_it1, ap_sig_cseq_ST_pp0_stg8_fsm_9, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg15_fsm_16, ap_sig_cseq_ST_pp0_stg22_fsm_23, ap_sig_cseq_ST_pp0_stg29_fsm_30)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg8_fsm_9)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg15_fsm_16)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg22_fsm_23)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg29_fsm_30)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_186_pp0_it1)))) then 
            output_M_real_we0 <= ap_const_logic_1;
        else 
            output_M_real_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_180_p1 <= std_logic_vector(resize(unsigned(index_reg_106),64));
end behav;
